{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0","program":"C:\\Users\\EdsoLabs\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\bin\\rls.exe","arguments":["--crate-name","cached","--edition=2018","C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"async\"","--cfg","feature=\"async-mutex\"","--cfg","feature=\"async-trait\"","--cfg","feature=\"cached_proc_macro\"","--cfg","feature=\"cached_proc_macro_types\"","--cfg","feature=\"default\"","--cfg","feature=\"futures\"","--cfg","feature=\"proc_macro\"","-C","metadata=3dfeb96c65b4a3ea","-C","extra-filename=-3dfeb96c65b4a3ea","--out-dir","d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps","-L","dependency=d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps","--extern","async_mutex=d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps\\libasync_mutex-ee28893c975ac04a.rmeta","--extern","async_trait=d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps\\async_trait-a493ff38293ae266.dll","--extern","cached_proc_macro=d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps\\cached_proc_macro-92287001ab4745ba.dll","--extern","cached_proc_macro_types=d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps\\libcached_proc_macro_types-e4132f1a943fdc49.rmeta","--extern","futures=d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps\\libfutures-681a5ada60a45d94.rmeta","--extern","hashbrown=d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps\\libhashbrown-c6c6a139f9188e6c.rmeta","--extern","once_cell=d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps\\libonce_cell-ec35aa9e3ac6ec2e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\EdsoLabs\\.rustup/toolchains/stable-x86_64-pc-windows-gnu"],"output":"d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps\\libcached-3dfeb96c65b4a3ea.rmeta"},"prelude":{"crate_id":{"name":"cached","disambiguator":[9005425609090956062,0]},"crate_root":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src","external_crates":[{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[14227917269865929319,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","num":2,"id":{"name":"core","disambiguator":[3349811929551758155,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1702804679386379989,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15672416423928090423,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8598227792379188233,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[5769158474563825368,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3530648977582343522,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2506787063780951408,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[18217546505148666724,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1477758975480187253,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[7478112954929493085,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[8303736825855284965,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[6920191638365057331,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[8036275889558659698,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[11512984086232062831,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":16,"id":{"name":"gimli","disambiguator":[9271252611893390968,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":17,"id":{"name":"object","disambiguator":[9703519715559763083,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":18,"id":{"name":"memchr","disambiguator":[18086250815212929056,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[3374753690728624589,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":20,"id":{"name":"once_cell","disambiguator":[16795548777571946022,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":21,"id":{"name":"async_trait","disambiguator":[16574181579033470224,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":22,"id":{"name":"futures","disambiguator":[8674021072421208781,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":23,"id":{"name":"futures_core","disambiguator":[2687588184588764940,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":24,"id":{"name":"futures_util","disambiguator":[214957461354968375,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":25,"id":{"name":"pin_utils","disambiguator":[316652566799803567,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":26,"id":{"name":"futures_macro","disambiguator":[10450496399648007275,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":27,"id":{"name":"futures_task","disambiguator":[17463709472723906557,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":28,"id":{"name":"futures_sink","disambiguator":[12633746427847364199,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":29,"id":{"name":"pin_project_lite","disambiguator":[16276132857996762389,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":30,"id":{"name":"futures_channel","disambiguator":[8876744063853937895,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":31,"id":{"name":"slab","disambiguator":[5247733365886864698,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":32,"id":{"name":"futures_io","disambiguator":[3258618366381264508,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":33,"id":{"name":"memchr","disambiguator":[7584533112868110264,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","num":34,"id":{"name":"futures_executor","disambiguator":[10671066898644733208,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","num":35,"id":{"name":"hashbrown","disambiguator":[13584762701571812928,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","num":36,"id":{"name":"ahash","disambiguator":[617385726949427762,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":37,"id":{"name":"cached_proc_macro","disambiguator":[9241533605542647918,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":38,"id":{"name":"cached_proc_macro_types","disambiguator":[6026987637007196930,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":39,"id":{"name":"async_mutex","disambiguator":[15969064131026466243,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","num":40,"id":{"name":"event_listener","disambiguator":[16915394173172060104,0]}}],"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":0,"byte_end":16664,"line_start":1,"line_end":539,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":27546,"byte_end":27556,"line_start":15,"line_end":15,"column_start":16,"column_end":26},"alias_span":null,"name":"SizedCache","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":27573,"byte_end":27583,"line_start":16,"line_end":16,"column_start":16,"column_end":26},"alias_span":null,"name":"TimedCache","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":27606,"byte_end":27621,"line_start":17,"line_end":17,"column_start":22,"column_end":37},"alias_span":null,"name":"TimedSizedCache","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":27640,"byte_end":27652,"line_start":18,"line_end":18,"column_start":18,"column_end":30},"alias_span":null,"name":"UnboundCache","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14277,"byte_end":14287,"line_start":458,"line_end":458,"column_start":18,"column_end":28},"alias_span":null,"name":"SizedCache","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14289,"byte_end":14299,"line_start":458,"line_end":458,"column_start":30,"column_end":40},"alias_span":null,"name":"TimedCache","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14301,"byte_end":14316,"line_start":458,"line_end":458,"column_start":42,"column_end":57},"alias_span":null,"name":"TimedSizedCache","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14318,"byte_end":14330,"line_start":458,"line_end":458,"column_start":59,"column_end":71},"alias_span":null,"name":"UnboundCache","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":37,"index":49},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14417,"byte_end":14423,"line_start":462,"line_end":462,"column_start":32,"column_end":38},"alias_span":null,"name":"cached","value":"","parent":{"krate":0,"index":385}},{"kind":"Use","ref_id":{"krate":38,"index":13},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14462,"byte_end":14468,"line_start":463,"line_end":463,"column_start":38,"column_end":44},"alias_span":null,"name":"Return","value":"","parent":{"krate":0,"index":385}},{"kind":"Use","ref_id":{"krate":39,"index":0},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14511,"byte_end":14522,"line_start":466,"line_end":466,"column_start":9,"column_end":20},"alias_span":null,"name":"async_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":38,"index":13},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14575,"byte_end":14581,"line_start":468,"line_end":468,"column_start":21,"column_end":27},"alias_span":null,"name":"Return","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":0,"byte_end":16664,"line_start":1,"line_end":539,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":26},{"krate":0,"index":32},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":405},{"krate":0,"index":673}],"decl_id":null,"docs":"[![Build Status](https://travis-ci.org/jaemk/cached.svg?branch=master)](https://travis-ci.org/jaemk/cached)\n[![crates.io](https://img.shields.io/crates/v/cached.svg)](https://crates.io/crates/cached)\n[![docs](https://docs.rs/cached/badge.svg)](https://docs.rs/cached)","sig":null,"attributes":[{"value":"*\n[![Build Status](https://travis-ci.org/jaemk/cached.svg?branch=master)](https://travis-ci.org/jaemk/cached)\n[![crates.io](https://img.shields.io/crates/v/cached.svg)](https://crates.io/crates/cached)\n[![docs](https://docs.rs/cached/badge.svg)](https://docs.rs/cached)\n\n> Caching structures and simplified function memoization\n\n`cached` provides implementations of several caching structures as well as a handy macro\nfor defining memoized functions.\n\nMemoized functions defined using `#[cached]`/`cached!` macros are thread-safe with the backing function-cache wrapped in a mutex.\nThe function-cache is **not** locked for the duration of the function's execution, so initial (on an empty cache)\nconcurrent calls of long-running functions with the same arguments will each execute fully and each overwrite\nthe memoized value as they complete. This mirrors the behavior of Python's `functools.lru_cache`.\n\nSee [`cached::stores` docs](https://docs.rs/cached/latest/cached/stores/index.html) for details about the\ncache stores available.\n\n**Features**\n\n- `proc_macro`: (default) pull in proc macro support\n- `async`: (default) Add `CachedAsync` trait\n\n## Defining memoized functions using macros, `#[cached]` & `cached!`\n\n**Notes on the proc-macro version #[cached]**\n\n- enabled by default, but can be disabled by specifying `default-features = false`\n  (if you aren't using it and don't want to have to compile `syn`)\n- supports more features at this point than the original collection of `cached!` macros do\n- works with async functions\n- see `cached_proc_macro/src/lib.rs` and examples below for more details on macro arguments\n- see `examples/kitchen_sink_proc_macro.rs` for basic usage\n\nThe basic usage looks like:\n\n\n```rust,no_run\nuse cached::proc_macro::cached;\n\n/// Defines a function named `fib` that uses a cache implicitly named `FIB`.\n/// By default, the cache will be the function's in all caps.\n/// The following line is equivalent to #[cached(name = \"FIB\", unbound)]\n#[cached]\nfn fib(n: u64) -> u64 {\n    if n == 0 || n == 1 { return n }\n    fib(n-1) + fib(n-2)\n}\n# pub fn main() { }\n```\n\n```rust,no_run\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::proc_macro::cached;\n\n/// Use an lru cache with size 100 and a `(String, String)` cache key\n#[cached(size=100)]\nfn keyed(a: String, b: String) -> usize {\n    let size = a.len() + b.len();\n    sleep(Duration::new(size as u64, 0));\n    size\n}\n# pub fn main() { }\n```\n\n```rust,no_run\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::proc_macro::cached;\n\n/// Use a timed-lru cache with size 1, a TTL of 60s,\n/// and a `(usize, usize)` cache key\n#[cached(size=1, time=60)]\nfn keyed(a: usize, b: usize) -> usize {\n    let total = a + b;\n    sleep(Duration::new(total as u64, 0));\n    total\n}\npub fn main() {\n    keyed(1, 2);  // Not cached, will sleep (1+2)s\n\n    keyed(1, 2);  // Cached, no sleep\n\n    sleep(Duration::new(60, 0));  // Sleep for the TTL\n\n    keyed(1, 2);  // 60s TTL has passed so the cached\n                  // value has expired, will sleep (1+2)s\n\n    keyed(1, 2);  // Cached, no sleep\n\n    keyed(2, 1);  // New args, not cached, will sleep (2+1)s\n\n    keyed(1, 2);  // Was evicted because of lru size of 1,\n                  // will sleep (1+2)s\n}\n```\n\n```rust,no_run\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::proc_macro::cached;\n\n/// Use a timed cache with a TTL of 60s\n/// and a `(String, String)` cache key\n#[cached(time=60)]\nfn keyed(a: String, b: String) -> usize {\n    let size = a.len() + b.len();\n    sleep(Duration::new(size as u64, 0));\n    size\n}\n# pub fn main() { }\n```\n\n```rust,no_run\nuse cached::proc_macro::cached;\n\n# fn do_something_fallible() -> std::result::Result<(), ()> {\n#     Ok(())\n# }\n\n/// Cache a fallible function. Only `Ok` results are cached.\n#[cached(size=1, result = true)]\nfn keyed(a: String) -> Result<usize, ()> {\n    do_something_fallible()?;\n    Ok(a.len())\n}\n# pub fn main() { }\n```\n\n```rust,no_run\nuse cached::proc_macro::cached;\n\n/// Cache an optional function. Only `Some` results are cached.\n#[cached(size=1, option = true)]\nfn keyed(a: String) -> Option<usize> {\n    if a == \"a\" {\n        Some(a.len())\n    } else {\n        None\n    }\n}\n# pub fn main() { }\n```\n\n```rust,no_run\nuse cached::proc_macro::cached;\nuse cached::Return;\n\n/// Get a `cached::Return` value that indicates\n/// whether the value returned came from the cache:\n/// `cached::Return.was_cached`.\n/// Use an LRU cache with a TTL of 60s\n/// and a `String` cache key.\n#[cached(size=1, with_cached_flag = true)]\nfn calculate(a: String) -> Return<String> {\n    Return::new(a)\n}\npub fn main() {\n    let r = calculate(\"a\".to_string());\n    assert!(!r.was_cached);\n    let r = calculate(\"a\".to_string());\n    assert!(r.was_cached);\n    // Return<String> derefs to String\n    assert_eq!(r.to_uppercase(), \"A\");\n}\n```\n\n```rust,no_run\nuse cached::proc_macro::cached;\nuse cached::Return;\n\n# fn do_something_fallible() -> std::result::Result<(), ()> {\n#     Ok(())\n# }\n\n/// Same as the previous, but returning a Result\n#[cached(size=1, result = true, with_cached_flag = true)]\nfn calculate(a: String) -> Result<Return<usize>, ()> {\n    do_something_fallible()?;\n    Ok(Return::new(a.len()))\n}\npub fn main() {\n    match calculate(\"a\".to_string()) {\n        Err(e) => eprintln!(\"error: {:?}\", e),\n        Ok(r) => {\n            println!(\"value: {:?}, was cached: {}\", *r, r.was_cached);\n            // value: \"a\", was cached: true\n        }\n    }\n}\n```\n\n```rust,no_run\nuse cached::proc_macro::cached;\nuse cached::Return;\n\n/// Same as the previous, but returning an Option\n#[cached(size=1, option = true, with_cached_flag = true)]\nfn calculate(a: String) -> Option<Return<usize>> {\n    if a == \"a\" {\n        Some(Return::new(a.len()))\n    } else {\n        None\n    }\n}\npub fn main() {\n    if let Some(a) = calculate(\"a\".to_string()) {\n        println!(\"value: {:?}, was cached: {}\", *a, a.was_cached);\n        // value: \"a\", was cached: true\n    }\n}\n```\n\n```rust,no_run\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::proc_macro::cached;\nuse cached::SizedCache;\n\n/// Use an explicit cache-type with a custom creation block and custom cache-key generating block\n#[cached(\n    type = \"SizedCache<String, usize>\",\n    create = \"{ SizedCache::with_size(100) }\",\n    convert = r#\"{ format!(\"{}{}\", a, b) }\"#\n)]\nfn keyed(a: &str, b: &str) -> usize {\n    let size = a.len() + b.len();\n    sleep(Duration::new(size as u64, 0));\n    size\n}\n# pub fn main() { }\n```\n\n----\n\n\n`#[cached]`/`cached!` defined functions will have their results cached using the function's arguments as a key\n(or a specific expression when using `cached_key!`).\nWhen a `cached!` defined function is called, the function's cache is first checked for an already\ncomputed (and still valid) value before evaluating the function body.\n\nDue to the requirements of storing arguments and return values in a global cache:\n\n- Function return types must be owned and implement `Clone`\n- Function arguments must either be owned and implement `Hash + Eq + Clone` OR the `cached_key!`\n  macro must be used to convert arguments into an owned + `Hash + Eq + Clone` type.\n- Arguments and return values will be `cloned` in the process of insertion and retrieval.\n- `#[cached]`/`cached!` functions should not be used to produce side-effectual results!\n- `#[cached]`/`cached!` functions cannot live directly under `impl` blocks since `cached!` expands to a\n  `once_cell` initialization and a function definition.\n- `#[cached]`/`cached!` functions cannot accept `Self` types as a parameter.\n\n**NOTE**: Any custom cache that implements `cached::Cached` can be used with the `cached` macros in place of the built-ins.\n\nSee [`examples`](https://github.com/jaemk/cached/tree/master/examples) for basic usage of proc-macro &\nmacro-rules macros and an example of implementing a custom cache-store.\n\n\n### `cached!` and `cached_key!` Usage & Options:\n\nThere are several options depending on how explicit you want to be. See below for a full syntax breakdown.\n\n\n1.) Using the shorthand will use an unbounded cache.\n\n\n```rust,no_run\n#[macro_use] extern crate cached;\n\n/// Defines a function named `fib` that uses a cache named `FIB`\ncached!{\n    FIB;\n    fn fib(n: u64) -> u64 = {\n        if n == 0 || n == 1 { return n }\n        fib(n-1) + fib(n-2)\n    }\n}\n# pub fn main() { }\n```\n\n\n2.) Using the full syntax requires specifying the full cache type and providing\n    an instance of the cache to use. Note that the cache's key-type is a tuple\n    of the function argument types. If you would like fine grained control over\n    the key, you can use the `cached_key!` macro.\n    The following example uses a `SizedCache` (LRU):\n\n```rust,no_run\n#[macro_use] extern crate cached;\n\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::SizedCache;\n\n/// Defines a function `compute` that uses an LRU cache named `COMPUTE` which has a\n/// size limit of 50 items. The `cached!` macro will implicitly combine\n/// the function arguments into a tuple to be used as the cache key.\ncached!{\n    COMPUTE: SizedCache<(u64, u64), u64> = SizedCache::with_size(50);\n    fn compute(a: u64, b: u64) -> u64 = {\n        sleep(Duration::new(2, 0));\n        return a * b;\n    }\n}\n# pub fn main() { }\n```\n\n\n3.) The `cached_key` macro functions identically, but allows you to define the\n    cache key as an expression.\n\n```rust,no_run\n#[macro_use] extern crate cached;\n\nuse std::thread::sleep;\nuse std::time::Duration;\nuse cached::SizedCache;\n\n/// Defines a function named `length` that uses an LRU cache named `LENGTH`.\n/// The `Key = ` expression is used to explicitly define the value that\n/// should be used as the cache key. Here the borrowed arguments are converted\n/// to an owned string that can be stored in the global function cache.\ncached_key!{\n    LENGTH: SizedCache<String, usize> = SizedCache::with_size(50);\n    Key = { format!(\"{}{}\", a, b) };\n    fn length(a: &str, b: &str) -> usize = {\n        let size = a.len() + b.len();\n        sleep(Duration::new(size as u64, 0));\n        size\n    }\n}\n# pub fn main() { }\n```\n\n4.) The `cached_result` and `cached_key_result` macros function similarly to `cached`\n    and `cached_key` respectively but the cached function needs to return `Result`\n    (or some type alias like `io::Result`). If the function returns `Ok(val)` then `val`\n    is cached, but errors are not. Note that only the success type needs to implement\n    `Clone`, _not_ the error type. When using `cached_result` and `cached_key_result`,\n    the cache type cannot be derived and must always be explicitly specified.\n\n```rust,no_run\n#[macro_use] extern crate cached;\n\nuse cached::UnboundCache;\n\n/// Cache the successes of a function.\n/// To use `cached_key_result` add a key function as in `cached_key`.\ncached_result!{\n   MULT: UnboundCache<(u64, u64), u64> = UnboundCache::new(); // Type must always be specified\n   fn mult(a: u64, b: u64) -> Result<u64, ()> = {\n        if a == 0 || b == 0 {\n            return Err(());\n        } else {\n            return Ok(a * b);\n        }\n   }\n}\n# pub fn main() { }\n```\n\n\n## Syntax\n\nThe common macro syntax is:\n\n\n```rust,ignore\ncached_key!{\n    CACHE_NAME: CacheType = CacheInstance;\n    Key = KeyExpression;\n    fn func_name(arg1: arg_type, arg2: arg_type) -> return_type = {\n        // do stuff like normal\n        return_type\n    }\n}\n```\n\nWhere:\n\n- `CACHE_NAME` is the unique name used to hold a `static ref` to the cache\n- `CacheType` is the full type of the cache\n- `CacheInstance` is any expression that yields an instance of `CacheType` to be used\n  as the cache-store, followed by `;`\n- When using the `cached_key!` macro, the \"Key\" line must be specified. This line must start with\n  the literal tokens `Key = `, followed by an expression that evaluates to the key, followed by `;`\n- `fn func_name(arg1: arg_type) -> return_type` is the same form as a regular function signature, with the exception\n  that functions with no return value must be explicitly stated (e.g. `fn func_name(arg: arg_type) -> ()`)\n- The expression following `=` is the function body assigned to `func_name`. Note, the function\n  body can make recursive calls to its cached-self (`func_name`).\n\n\n# Fine grained control using `cached_control!`\n\nThe `cached_control!` macro allows you to provide expressions that get plugged into key areas\nof the memoized function. While the `cached` and `cached_result` variants are adequate for most\nscenarios, it can be useful to have the ability to customize the macro's functionality.\n\n```rust,no_run\n#[macro_use] extern crate cached;\n\nuse cached::UnboundCache;\n\n/// The following usage plugs in expressions to make the macro behave like\n/// the `cached_result!` macro.\ncached_control!{\n    CACHE: UnboundCache<String, String> = UnboundCache::new();\n\n    // Use an owned copy of the argument `input` as the cache key\n    Key = { input.to_owned() };\n\n    // If a cached value exists, it will bind to `cached_val` and\n    // a `Result` will be returned containing a copy of the cached\n    // evaluated body. This will return before the function body\n    // is executed.\n    PostGet(cached_val) = { return Ok(cached_val.clone()) };\n\n    // The result of executing the function body will be bound to\n    // `body_result`. In this case, the function body returns a `Result`.\n    // We match on the `Result`, returning an early `Err` if the function errored.\n    // Otherwise, we pass on the function's result to be cached.\n    PostExec(body_result) = {\n        match body_result {\n            Ok(v) => v,\n            Err(e) => return Err(e),\n        }\n    };\n\n    // When inserting the value into the cache we bind\n    // the to-be-set-value to `set_value` and give back a copy\n    // of it to be inserted into the cache\n    Set(set_value) = { set_value.clone() };\n\n    // Before returning, print the value that will be returned\n    Return(return_value) = {\n        println!(\"{}\", return_value);\n        Ok(return_value)\n    };\n\n    fn can_fail(input: &str) -> Result<String, String> = {\n        let len = input.len();\n        if len < 3 { Ok(format!(\"{}-{}\", input, len)) }\n        else { Err(\"too big\".to_string()) }\n    }\n}\n# pub fn main() {}\n```\n\n*/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":0,"byte_end":14182,"line_start":1,"line_end":450,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\macros.rs","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"decl_id":null,"docs":"Macro for defining functions that wrap a static-ref cache object.\n \n","sig":null,"attributes":[{"value":"*\nMacro for defining functions that wrap a static-ref cache object.\n */","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\macros.rs","byte_start":21088,"byte_end":21161,"line_start":1,"line_end":3,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stores","qualname":"::stores","value":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":177},{"krate":0,"index":232},{"krate":0,"index":295},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":644}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30240,"byte_end":30250,"line_start":19,"line_end":19,"column_start":12,"column_end":22},"name":"SizedCache","qualname":"::stores::sized::SizedCache","value":"SizedCache {  }","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"decl_id":null,"docs":" Least Recently Used / `Sized` Cache","sig":null,"attributes":[{"value":"/ Least Recently Used / `Sized` Cache","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30032,"byte_end":30071,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30072,"byte_end":30075,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Stores up to a specified size before beginning","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30076,"byte_end":30126,"line_start":14,"line_end":14,"column_start":1,"column_end":51}},{"value":"/ to evict the least recently used keys","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30127,"byte_end":30168,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30169,"byte_end":30172,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Note: This cache is in-memory only","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30173,"byte_end":30211,"line_start":17,"line_end":17,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30636,"byte_end":30639,"line_start":34,"line_end":34,"column_start":8,"column_end":11},"name":"fmt","qualname":"<SizedCache<K, V> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":31031,"byte_end":31033,"line_start":49,"line_end":49,"column_start":8,"column_end":10},"name":"eq","qualname":"<SizedCache<K, V> as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &SizedCache<K, V>) -> bool","parent":{"krate":2,"index":2802},"children":[],"decl_id":{"krate":2,"index":2804},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":31618,"byte_end":31631,"line_start":70,"line_end":70,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<SizedCache<K, V>>::with_capacity","value":"fn with_capacity(usize) -> SizedCache<K, V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.5.1\", note = \"method renamed to `with_size`\")","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":31536,"byte_end":31606,"line_start":69,"line_end":69,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":31805,"byte_end":31814,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"with_size","qualname":"<SizedCache<K, V>>::with_size","value":"fn with_size(usize) -> SizedCache<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `SizedCache` with a given size limit and pre-allocated backing data\n","sig":null,"attributes":[{"value":"/ Creates a new `SizedCache` with a given size limit and pre-allocated backing data","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":31708,"byte_end":31793,"line_start":74,"line_end":74,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":32433,"byte_end":32442,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"key_order","qualname":"<SizedCache<K, V>>::key_order","value":"fn key_order(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of keys in the current order from most\n to least recently used.\n","sig":null,"attributes":[{"value":"/ Return an iterator of keys in the current order from most","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":32328,"byte_end":32389,"line_start":93,"line_end":93,"column_start":5,"column_end":66}},{"value":"/ to least recently used.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":32394,"byte_end":32421,"line_start":94,"line_end":94,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":32641,"byte_end":32652,"line_start":101,"line_end":101,"column_start":12,"column_end":23},"name":"value_order","qualname":"<SizedCache<K, V>>::value_order","value":"fn value_order(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of values in the current order from most\n to least recently used.\n","sig":null,"attributes":[{"value":"/ Return an iterator of values in the current order from most","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":32534,"byte_end":32597,"line_start":99,"line_end":99,"column_start":5,"column_end":68}},{"value":"/ to least recently used.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":32602,"byte_end":32629,"line_start":100,"line_end":100,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":40548,"byte_end":40557,"line_start":331,"line_end":331,"column_start":8,"column_end":17},"name":"cache_get","qualname":"<SizedCache<K, V> as Cached>::cache_get","value":"fn cache_get(&mut Self, &K) -> Option<&V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":408},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":40643,"byte_end":40656,"line_start":335,"line_end":335,"column_start":8,"column_end":21},"name":"cache_get_mut","qualname":"<SizedCache<K, V> as Cached>::cache_get_mut","value":"fn cache_get_mut(&mut Self, &K) -> std::option::Option<&mut V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":409},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":40763,"byte_end":40772,"line_start":339,"line_end":339,"column_start":8,"column_end":17},"name":"cache_set","qualname":"<SizedCache<K, V> as Cached>::cache_set","value":"fn cache_set(&mut Self, K, V) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":410},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":41163,"byte_end":41184,"line_start":351,"line_end":351,"column_start":8,"column_end":29},"name":"cache_get_or_set_with","qualname":"<SizedCache<K, V> as Cached>::cache_get_or_set_with","value":"fn cache_get_or_set_with<F>(&mut Self, K, F) -> &mut V where F: FnOnce() -> V","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":411},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":41331,"byte_end":41343,"line_start":356,"line_end":356,"column_start":8,"column_end":20},"name":"cache_remove","qualname":"<SizedCache<K, V> as Cached>::cache_remove","value":"fn cache_remove(&mut Self, &K) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":41755,"byte_end":41766,"line_start":367,"line_end":367,"column_start":8,"column_end":19},"name":"cache_clear","qualname":"<SizedCache<K, V> as Cached>::cache_clear","value":"fn cache_clear(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":414},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":41900,"byte_end":41911,"line_start":372,"line_end":372,"column_start":8,"column_end":19},"name":"cache_reset","qualname":"<SizedCache<K, V> as Cached>::cache_reset","value":"fn cache_reset(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":415},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42032,"byte_end":42042,"line_start":376,"line_end":376,"column_start":8,"column_end":18},"name":"cache_size","qualname":"<SizedCache<K, V> as Cached>::cache_size","value":"fn cache_size(&Self) -> usize","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":416},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42099,"byte_end":42109,"line_start":379,"line_end":379,"column_start":8,"column_end":18},"name":"cache_hits","qualname":"<SizedCache<K, V> as Cached>::cache_hits","value":"fn cache_hits(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":417},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42171,"byte_end":42183,"line_start":382,"line_end":382,"column_start":8,"column_end":20},"name":"cache_misses","qualname":"<SizedCache<K, V> as Cached>::cache_misses","value":"fn cache_misses(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":418},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42247,"byte_end":42261,"line_start":385,"line_end":385,"column_start":8,"column_end":22},"name":"cache_capacity","qualname":"<SizedCache<K, V> as Cached>::cache_capacity","value":"fn cache_capacity(&Self) -> Option<usize>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":419},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42470,"byte_end":42485,"line_start":396,"line_end":396,"column_start":14,"column_end":29},"name":"get_or_set_with","qualname":"<SizedCache<K, V> as CachedAsync>::get_or_set_with","value":"fn get_or_set_with<'life0, 'async_trait, F, Fut>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = &mut V> +\n    ::core::marker::Send + 'async_trait>> where V: Send, F: FnOnce() -> Fut +\nSend, Fut: Future<Output = V> + Send, F: 'async_trait, Fut: 'async_trait,\n'life0:'async_trait, Self: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":676},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42351,"byte_end":42365,"line_start":391,"line_end":391,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42742,"byte_end":42761,"line_start":406,"line_end":406,"column_start":14,"column_end":33},"name":"try_get_or_set_with","qualname":"<SizedCache<K, V> as CachedAsync>::try_get_or_set_with","value":"fn try_get_or_set_with<'life0, 'async_trait, F, Fut,\nE>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =\n    Result<&mut V, E>> + ::core::marker::Send + 'async_trait>> where V: Send,\nF: FnOnce() -> Fut + Send, Fut: Future<Output = Result<V, E>> + Send,\nF: 'async_trait, Fut: 'async_trait, E: 'async_trait, 'life0:'async_trait,\nSelf: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":681},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42351,"byte_end":42365,"line_start":391,"line_end":391,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52448,"byte_end":52458,"line_start":26,"line_end":26,"column_start":12,"column_end":22},"name":"TimedCache","qualname":"::stores::timed::TimedCache","value":"TimedCache {  }","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"decl_id":null,"docs":" Cache store bound by time","sig":null,"attributes":[{"value":"/ Cache store bound by time","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52242,"byte_end":52271,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52272,"byte_end":52275,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Values are timestamped when inserted and are","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52276,"byte_end":52324,"line_start":21,"line_end":21,"column_start":1,"column_end":49}},{"value":"/ evicted if expired at time of retrieval.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52325,"byte_end":52369,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52370,"byte_end":52373,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Note: This cache is in-memory only","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52374,"byte_end":52412,"line_start":24,"line_end":24,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52762,"byte_end":52775,"line_start":36,"line_end":36,"column_start":12,"column_end":25},"name":"with_lifespan","qualname":"<TimedCache<K, V>>::with_lifespan","value":"fn with_lifespan(u64) -> TimedCache<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TimedCache` with a specified lifespan\n","sig":null,"attributes":[{"value":"/ Creates a new `TimedCache` with a specified lifespan","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52694,"byte_end":52750,"line_start":35,"line_end":35,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":53131,"byte_end":53157,"line_start":48,"line_end":48,"column_start":12,"column_end":38},"name":"with_lifespan_and_capacity","qualname":"<TimedCache<K, V>>::with_lifespan_and_capacity","value":"fn with_lifespan_and_capacity(u64, usize) -> TimedCache<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TimedCache` with a specified lifespan and\n cache-store with the specified pre-allocated capacity\n","sig":null,"attributes":[{"value":"/ Creates a new `TimedCache` with a specified lifespan and","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52997,"byte_end":53057,"line_start":46,"line_end":46,"column_start":5,"column_end":65}},{"value":"/ cache-store with the specified pre-allocated capacity","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":53062,"byte_end":53119,"line_start":47,"line_end":47,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":53613,"byte_end":53622,"line_start":64,"line_end":64,"column_start":8,"column_end":17},"name":"cache_get","qualname":"<TimedCache<K, V> as Cached>::cache_get","value":"fn cache_get(&mut Self, &K) -> Option<&V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":408},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":54468,"byte_end":54481,"line_start":94,"line_end":94,"column_start":8,"column_end":21},"name":"cache_get_mut","qualname":"<TimedCache<K, V> as Cached>::cache_get_mut","value":"fn cache_get_mut(&mut Self, &K) -> Option<&mut V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":409},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":55339,"byte_end":55360,"line_start":124,"line_end":124,"column_start":8,"column_end":29},"name":"cache_get_or_set_with","qualname":"<TimedCache<K, V> as Cached>::cache_get_or_set_with","value":"fn cache_get_or_set_with<F>(&mut Self, K, F) -> &mut V where F: FnOnce() -> V","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":411},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56045,"byte_end":56054,"line_start":144,"line_end":144,"column_start":8,"column_end":17},"name":"cache_set","qualname":"<TimedCache<K, V> as Cached>::cache_set","value":"fn cache_set(&mut Self, K, V) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":410},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56211,"byte_end":56223,"line_start":148,"line_end":148,"column_start":8,"column_end":20},"name":"cache_remove","qualname":"<TimedCache<K, V> as Cached>::cache_remove","value":"fn cache_remove(&mut Self, &K) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56315,"byte_end":56326,"line_start":151,"line_end":151,"column_start":8,"column_end":19},"name":"cache_clear","qualname":"<TimedCache<K, V> as Cached>::cache_clear","value":"fn cache_clear(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":414},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56381,"byte_end":56392,"line_start":154,"line_end":154,"column_start":8,"column_end":19},"name":"cache_reset","qualname":"<TimedCache<K, V> as Cached>::cache_reset","value":"fn cache_reset(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":415},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56480,"byte_end":56490,"line_start":157,"line_end":157,"column_start":8,"column_end":18},"name":"cache_size","qualname":"<TimedCache<K, V> as Cached>::cache_size","value":"fn cache_size(&Self) -> usize","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":416},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56547,"byte_end":56557,"line_start":160,"line_end":160,"column_start":8,"column_end":18},"name":"cache_hits","qualname":"<TimedCache<K, V> as Cached>::cache_hits","value":"fn cache_hits(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":417},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56619,"byte_end":56631,"line_start":163,"line_end":163,"column_start":8,"column_end":20},"name":"cache_misses","qualname":"<TimedCache<K, V> as Cached>::cache_misses","value":"fn cache_misses(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":418},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56695,"byte_end":56709,"line_start":166,"line_end":166,"column_start":8,"column_end":22},"name":"cache_lifespan","qualname":"<TimedCache<K, V> as Cached>::cache_lifespan","value":"fn cache_lifespan(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":420},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56775,"byte_end":56793,"line_start":170,"line_end":170,"column_start":8,"column_end":26},"name":"cache_set_lifespan","qualname":"<TimedCache<K, V> as Cached>::cache_set_lifespan","value":"fn cache_set_lifespan(&mut Self, u64) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":421},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":57072,"byte_end":57087,"line_start":183,"line_end":183,"column_start":14,"column_end":29},"name":"get_or_set_with","qualname":"<TimedCache<K, V> as CachedAsync>::get_or_set_with","value":"fn get_or_set_with<'life0, 'async_trait, F, Fut>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = &mut V> +\n    ::core::marker::Send + 'async_trait>> where V: Send, F: FnOnce() -> Fut +\nSend, Fut: Future<Output = V> + Send, F: 'async_trait, Fut: 'async_trait,\n'life0:'async_trait, Self: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":676},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56953,"byte_end":56967,"line_start":178,"line_end":178,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":57816,"byte_end":57835,"line_start":206,"line_end":206,"column_start":14,"column_end":33},"name":"try_get_or_set_with","qualname":"<TimedCache<K, V> as CachedAsync>::try_get_or_set_with","value":"fn try_get_or_set_with<'life0, 'async_trait, F, Fut,\nE>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =\n    Result<&mut V, E>> + ::core::marker::Send + 'async_trait>> where V: Send,\nF: FnOnce() -> Fut + Send, Fut: Future<Output = Result<V, E>> + Send,\nF: 'async_trait, Fut: 'async_trait, E: 'async_trait, 'life0:'async_trait,\nSelf: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":681},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":56953,"byte_end":56967,"line_start":178,"line_end":178,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":62860,"byte_end":62875,"line_start":18,"line_end":18,"column_start":12,"column_end":27},"name":"TimedSizedCache","qualname":"::stores::timed_sized::TimedSizedCache","value":"TimedSizedCache {  }","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556}],"decl_id":null,"docs":" Timed LRU Cache","sig":null,"attributes":[{"value":"/ Timed LRU Cache","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":62553,"byte_end":62572,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":62573,"byte_end":62576,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Stores a limited number of values,","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":62577,"byte_end":62615,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"/ evicting expired and least-used entries.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":62616,"byte_end":62660,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/ Time expiration is determined based on entry insertion time..","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":62661,"byte_end":62726,"line_start":13,"line_end":13,"column_start":1,"column_end":66}},{"value":"/ The TTL of an entry is not updated when retrieved.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":62727,"byte_end":62781,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":62782,"byte_end":62785,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Note: This cache is in-memory only","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":62786,"byte_end":62824,"line_start":16,"line_end":16,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":63204,"byte_end":63226,"line_start":28,"line_end":28,"column_start":12,"column_end":34},"name":"with_size_and_lifespan","qualname":"<TimedSizedCache<K, V>>::with_size_and_lifespan","value":"fn with_size_and_lifespan(usize, u64) -> TimedSizedCache<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `SizedCache` with a given size limit and pre-allocated backing data\n","sig":null,"attributes":[{"value":"/ Creates a new `SizedCache` with a given size limit and pre-allocated backing data","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":63107,"byte_end":63192,"line_start":27,"line_end":27,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":63987,"byte_end":63996,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"key_order","qualname":"<TimedSizedCache<K, V>>::key_order","value":"fn key_order(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of keys in the current order from most\n to least recently used.\n Items passed their expiration seconds will be excluded.\n","sig":null,"attributes":[{"value":"/ Return an iterator of keys in the current order from most","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":63818,"byte_end":63879,"line_start":48,"line_end":48,"column_start":5,"column_end":66}},{"value":"/ to least recently used.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":63884,"byte_end":63911,"line_start":49,"line_end":49,"column_start":5,"column_end":32}},{"value":"/ Items passed their expiration seconds will be excluded.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":63916,"byte_end":63975,"line_start":50,"line_end":50,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":64271,"byte_end":64282,"line_start":58,"line_end":58,"column_start":12,"column_end":23},"name":"value_order","qualname":"<TimedSizedCache<K, V>>::value_order","value":"fn value_order(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of timestamped values in the current order\n from most to least recently used.\n Items passed their expiration seconds will be excluded.\n","sig":null,"attributes":[{"value":"/ Return an iterator of timestamped values in the current order","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":64088,"byte_end":64153,"line_start":55,"line_end":55,"column_start":5,"column_end":70}},{"value":"/ from most to least recently used.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":64158,"byte_end":64195,"line_start":56,"line_end":56,"column_start":5,"column_end":42}},{"value":"/ Items passed their expiration seconds will be excluded.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":64200,"byte_end":64259,"line_start":57,"line_end":57,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":64461,"byte_end":64470,"line_start":64,"line_end":64,"column_start":8,"column_end":17},"name":"cache_get","qualname":"<TimedSizedCache<K, V> as Cached>::cache_get","value":"fn cache_get(&mut Self, &K) -> Option<&V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":408},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":64915,"byte_end":64928,"line_start":81,"line_end":81,"column_start":8,"column_end":21},"name":"cache_get_mut","qualname":"<TimedSizedCache<K, V> as Cached>::cache_get_mut","value":"fn cache_get_mut(&mut Self, &K) -> std::option::Option<&mut V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":409},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":65398,"byte_end":65419,"line_start":98,"line_end":98,"column_start":8,"column_end":29},"name":"cache_get_or_set_with","qualname":"<TimedSizedCache<K, V> as Cached>::cache_get_or_set_with","value":"fn cache_get_or_set_with<F>(&mut Self, K, F) -> &mut V where F: FnOnce() -> V","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":411},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":65913,"byte_end":65922,"line_start":113,"line_end":113,"column_start":8,"column_end":17},"name":"cache_set","qualname":"<TimedSizedCache<K, V> as Cached>::cache_set","value":"fn cache_set(&mut Self, K, V) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":410},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66092,"byte_end":66104,"line_start":118,"line_end":118,"column_start":8,"column_end":20},"name":"cache_remove","qualname":"<TimedSizedCache<K, V> as Cached>::cache_remove","value":"fn cache_remove(&mut Self, &K) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66242,"byte_end":66253,"line_start":122,"line_end":122,"column_start":8,"column_end":19},"name":"cache_clear","qualname":"<TimedSizedCache<K, V> as Cached>::cache_clear","value":"fn cache_clear(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":414},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66314,"byte_end":66325,"line_start":125,"line_end":125,"column_start":8,"column_end":19},"name":"cache_reset","qualname":"<TimedSizedCache<K, V> as Cached>::cache_reset","value":"fn cache_reset(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":415},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66380,"byte_end":66390,"line_start":128,"line_end":128,"column_start":8,"column_end":18},"name":"cache_size","qualname":"<TimedSizedCache<K, V> as Cached>::cache_size","value":"fn cache_size(&Self) -> usize","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":416},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66454,"byte_end":66464,"line_start":131,"line_end":131,"column_start":8,"column_end":18},"name":"cache_hits","qualname":"<TimedSizedCache<K, V> as Cached>::cache_hits","value":"fn cache_hits(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":417},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66526,"byte_end":66538,"line_start":134,"line_end":134,"column_start":8,"column_end":20},"name":"cache_misses","qualname":"<TimedSizedCache<K, V> as Cached>::cache_misses","value":"fn cache_misses(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":418},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66602,"byte_end":66616,"line_start":137,"line_end":137,"column_start":8,"column_end":22},"name":"cache_capacity","qualname":"<TimedSizedCache<K, V> as Cached>::cache_capacity","value":"fn cache_capacity(&Self) -> Option<usize>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":419},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66680,"byte_end":66694,"line_start":140,"line_end":140,"column_start":8,"column_end":22},"name":"cache_lifespan","qualname":"<TimedSizedCache<K, V> as Cached>::cache_lifespan","value":"fn cache_lifespan(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":420},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66759,"byte_end":66777,"line_start":143,"line_end":143,"column_start":8,"column_end":26},"name":"cache_set_lifespan","qualname":"<TimedSizedCache<K, V> as Cached>::cache_set_lifespan","value":"fn cache_set_lifespan(&mut Self, u64) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":421},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":67061,"byte_end":67076,"line_start":156,"line_end":156,"column_start":14,"column_end":29},"name":"get_or_set_with","qualname":"<TimedSizedCache<K, V> as CachedAsync>::get_or_set_with","value":"fn get_or_set_with<'life0, 'async_trait, F, Fut>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = &mut V> +\n    ::core::marker::Send + 'async_trait>> where V: Send, F: FnOnce() -> Fut +\nSend, Fut: Future<Output = V> + Send, F: 'async_trait, Fut: 'async_trait,\n'life0:'async_trait, Self: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":676},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66937,"byte_end":66951,"line_start":151,"line_end":151,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":67727,"byte_end":67746,"line_start":178,"line_end":178,"column_start":14,"column_end":33},"name":"try_get_or_set_with","qualname":"<TimedSizedCache<K, V> as CachedAsync>::try_get_or_set_with","value":"fn try_get_or_set_with<'life0, 'async_trait, F, Fut,\nE>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =\n    Result<&mut V, E>> + ::core::marker::Send + 'async_trait>> where V: Send,\nF: FnOnce() -> Fut + Send, Fut: Future<Output = Result<V, E>> + Send,\nF: 'async_trait, Fut: 'async_trait, E: 'async_trait, 'life0:'async_trait,\nSelf: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":681},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66937,"byte_end":66951,"line_start":151,"line_end":151,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77521,"byte_end":77533,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"UnboundCache","qualname":"::stores::unbound::UnboundCache","value":"UnboundCache {  }","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606}],"decl_id":null,"docs":" Default unbounded cache","sig":null,"attributes":[{"value":"/ Default unbounded cache","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77358,"byte_end":77385,"line_start":11,"line_end":11,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77386,"byte_end":77389,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This cache has no size limit or eviction policy.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77390,"byte_end":77442,"line_start":13,"line_end":13,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77443,"byte_end":77446,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Note: This cache is in-memory only","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77447,"byte_end":77485,"line_start":15,"line_end":15,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77779,"byte_end":77781,"line_start":29,"line_end":29,"column_start":8,"column_end":10},"name":"eq","qualname":"<UnboundCache<K, V> as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &UnboundCache<K, V>) -> bool","parent":{"krate":2,"index":2802},"children":[],"decl_id":{"krate":2,"index":2804},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":78092,"byte_end":78095,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<UnboundCache<K, V>>::new","value":"fn new() -> UnboundCache<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `UnboundCache`\n","sig":null,"attributes":[{"value":"/ Creates an empty `UnboundCache`","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":78003,"byte_end":78038,"line_start":42,"line_end":42,"column_start":5,"column_end":40}},{"value":"allow(clippy :: new_without_default)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":78043,"byte_end":78080,"line_start":43,"line_end":43,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":78371,"byte_end":78384,"line_start":54,"line_end":54,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<UnboundCache<K, V>>::with_capacity","value":"fn with_capacity(usize) -> UnboundCache<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `UnboundCache` with a given pre-allocated capacity\n","sig":null,"attributes":[{"value":"/ Creates an empty `UnboundCache` with a given pre-allocated capacity","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":78288,"byte_end":78359,"line_start":53,"line_end":53,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":78800,"byte_end":78809,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"cache_get","qualname":"<UnboundCache<K, V> as Cached>::cache_get","value":"fn cache_get(&mut Self, &K) -> Option<&V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":408},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":79091,"byte_end":79104,"line_start":81,"line_end":81,"column_start":8,"column_end":21},"name":"cache_get_mut","qualname":"<UnboundCache<K, V> as Cached>::cache_get_mut","value":"fn cache_get_mut(&mut Self, &K) -> std::option::Option<&mut V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":409},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":79407,"byte_end":79416,"line_start":93,"line_end":93,"column_start":8,"column_end":17},"name":"cache_set","qualname":"<UnboundCache<K, V> as Cached>::cache_set","value":"fn cache_set(&mut Self, K, V) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":410},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":79508,"byte_end":79529,"line_start":96,"line_end":96,"column_start":8,"column_end":29},"name":"cache_get_or_set_with","qualname":"<UnboundCache<K, V> as Cached>::cache_get_or_set_with","value":"fn cache_get_or_set_with<F>(&mut Self, K, F) -> &mut V where F: FnOnce() -> V","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":411},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":79894,"byte_end":79906,"line_start":109,"line_end":109,"column_start":8,"column_end":20},"name":"cache_remove","qualname":"<UnboundCache<K, V> as Cached>::cache_remove","value":"fn cache_remove(&mut Self, &K) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":79982,"byte_end":79993,"line_start":112,"line_end":112,"column_start":8,"column_end":19},"name":"cache_clear","qualname":"<UnboundCache<K, V> as Cached>::cache_clear","value":"fn cache_clear(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":414},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80048,"byte_end":80059,"line_start":115,"line_end":115,"column_start":8,"column_end":19},"name":"cache_reset","qualname":"<UnboundCache<K, V> as Cached>::cache_reset","value":"fn cache_reset(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":415},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80147,"byte_end":80157,"line_start":118,"line_end":118,"column_start":8,"column_end":18},"name":"cache_size","qualname":"<UnboundCache<K, V> as Cached>::cache_size","value":"fn cache_size(&Self) -> usize","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":416},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80214,"byte_end":80224,"line_start":121,"line_end":121,"column_start":8,"column_end":18},"name":"cache_hits","qualname":"<UnboundCache<K, V> as Cached>::cache_hits","value":"fn cache_hits(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":417},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80286,"byte_end":80298,"line_start":124,"line_end":124,"column_start":8,"column_end":20},"name":"cache_misses","qualname":"<UnboundCache<K, V> as Cached>::cache_misses","value":"fn cache_misses(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":418},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80505,"byte_end":80520,"line_start":135,"line_end":135,"column_start":14,"column_end":29},"name":"get_or_set_with","qualname":"<UnboundCache<K, V> as CachedAsync>::get_or_set_with","value":"fn get_or_set_with<'life0, 'async_trait, F, Fut>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = &mut V> +\n    ::core::marker::Send + 'async_trait>> where V: Send, F: FnOnce() -> Fut +\nSend, Fut: Future<Output = V> + Send, F: 'async_trait, Fut: 'async_trait,\n'life0:'async_trait, Self: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":676},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80384,"byte_end":80398,"line_start":130,"line_end":130,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80994,"byte_end":81013,"line_start":154,"line_end":154,"column_start":14,"column_end":33},"name":"try_get_or_set_with","qualname":"<UnboundCache<K, V> as CachedAsync>::try_get_or_set_with","value":"fn try_get_or_set_with<'life0, 'async_trait, F, Fut,\nE>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =\n    Result<&mut V, E>> + ::core::marker::Send + 'async_trait>> where V: Send,\nF: FnOnce() -> Fut + Send, Fut: Future<Output = Result<V, E>> + Send,\nF: 'async_trait, Fut: 'async_trait, E: 'async_trait, 'life0:'async_trait,\nSelf: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":681},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80384,"byte_end":80398,"line_start":130,"line_end":130,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":27717,"byte_end":27726,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"cache_get","qualname":"<HashMap<K, V> as Cached>::cache_get","value":"fn cache_get(&mut Self, &K) -> Option<&V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":408},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":27794,"byte_end":27807,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"cache_get_mut","qualname":"<HashMap<K, V> as Cached>::cache_get_mut","value":"fn cache_get_mut(&mut Self, &K) -> Option<&mut V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":409},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":27883,"byte_end":27904,"line_start":27,"line_end":27,"column_start":8,"column_end":29},"name":"cache_get_or_set_with","qualname":"<HashMap<K, V> as Cached>::cache_get_or_set_with","value":"fn cache_get_or_set_with<F>(&mut Self, K, F) -> &mut V where F: FnOnce() -> V","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":411},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28015,"byte_end":28024,"line_start":30,"line_end":30,"column_start":8,"column_end":17},"name":"cache_set","qualname":"<HashMap<K, V> as Cached>::cache_set","value":"fn cache_set(&mut Self, K, V) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":410},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28102,"byte_end":28114,"line_start":33,"line_end":33,"column_start":8,"column_end":20},"name":"cache_remove","qualname":"<HashMap<K, V> as Cached>::cache_remove","value":"fn cache_remove(&mut Self, &K) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28184,"byte_end":28195,"line_start":36,"line_end":36,"column_start":8,"column_end":19},"name":"cache_clear","qualname":"<HashMap<K, V> as Cached>::cache_clear","value":"fn cache_clear(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":414},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28244,"byte_end":28255,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"cache_reset","qualname":"<HashMap<K, V> as Cached>::cache_reset","value":"fn cache_reset(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":415},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28314,"byte_end":28324,"line_start":42,"line_end":42,"column_start":8,"column_end":18},"name":"cache_size","qualname":"<HashMap<K, V> as Cached>::cache_size","value":"fn cache_size(&Self) -> usize","parent":{"krate":0,"index":405},"children":[],"decl_id":{"krate":0,"index":416},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28513,"byte_end":28528,"line_start":53,"line_end":53,"column_start":14,"column_end":29},"name":"get_or_set_with","qualname":"<HashMap<K, V> as CachedAsync>::get_or_set_with","value":"fn get_or_set_with<'life0, 'async_trait, F, Fut>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = &mut V> +\n    ::core::marker::Send + 'async_trait>> where V: Send, F: FnOnce() -> Fut +\nSend, Fut: Future<Output = V> + Send, F: 'async_trait, Fut: 'async_trait,\n'life0:'async_trait, Self: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":676},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28397,"byte_end":28411,"line_start":48,"line_end":48,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28839,"byte_end":28858,"line_start":65,"line_end":65,"column_start":14,"column_end":33},"name":"try_get_or_set_with","qualname":"<HashMap<K, V> as CachedAsync>::try_get_or_set_with","value":"fn try_get_or_set_with<'life0, 'async_trait, F, Fut,\nE>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =\n    Result<&mut V, E>> + ::core::marker::Send + 'async_trait>> where V: Send,\nF: FnOnce() -> Fut + Send, Fut: Future<Output = Result<V, E>> + Send,\nF: 'async_trait, Fut: 'async_trait, E: 'async_trait, 'life0:'async_trait,\nSelf: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":{"krate":0,"index":681},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: used_underscore_binding)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28397,"byte_end":28411,"line_start":48,"line_end":48,"column_start":1,"column_end":15}}]},{"kind":"Mod","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14373,"byte_end":14383,"line_start":461,"line_end":461,"column_start":9,"column_end":19},"name":"proc_macro","qualname":"::proc_macro","value":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":389}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"proc_macro\")","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14334,"byte_end":14364,"line_start":460,"line_end":460,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14691,"byte_end":14697,"line_start":474,"line_end":474,"column_start":11,"column_end":17},"name":"Cached","qualname":"::Cached","value":"Cached<K, V>","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421}],"decl_id":null,"docs":" Cache operations\n","sig":null,"attributes":[{"value":"/ Cache operations","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14660,"byte_end":14680,"line_start":473,"line_end":473,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14756,"byte_end":14765,"line_start":476,"line_end":476,"column_start":8,"column_end":17},"name":"cache_get","qualname":"::Cached::cache_get","value":"fn cache_get(&mut Self, &K) -> Option<&V>","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Attempt to retrieve a cached value\n","sig":null,"attributes":[{"value":"/ Attempt to retrieve a cached value","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14710,"byte_end":14748,"line_start":475,"line_end":475,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14870,"byte_end":14883,"line_start":479,"line_end":479,"column_start":8,"column_end":21},"name":"cache_get_mut","qualname":"::Cached::cache_get_mut","value":"fn cache_get_mut(&mut Self, &K) -> Option<&mut V>","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Attempt to retrieve a cached value with mutable access\n","sig":null,"attributes":[{"value":"/ Attempt to retrieve a cached value with mutable access","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14804,"byte_end":14862,"line_start":478,"line_end":478,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14992,"byte_end":15001,"line_start":482,"line_end":482,"column_start":8,"column_end":17},"name":"cache_set","qualname":"::Cached::cache_set","value":"fn cache_set(&mut Self, K, V) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Insert a key, value pair and return the previous value\n","sig":null,"attributes":[{"value":"/ Insert a key, value pair and return the previous value","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14926,"byte_end":14984,"line_start":481,"line_end":481,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15087,"byte_end":15108,"line_start":485,"line_end":485,"column_start":8,"column_end":29},"name":"cache_get_or_set_with","qualname":"::Cached::cache_get_or_set_with","value":"fn cache_get_or_set_with<F>(&mut Self, K, F) -> &mut V where F: FnOnce() -> V","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Get or insert a key, value pair\n","sig":null,"attributes":[{"value":"/ Get or insert a key, value pair","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15044,"byte_end":15079,"line_start":484,"line_end":484,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15199,"byte_end":15211,"line_start":488,"line_end":488,"column_start":8,"column_end":20},"name":"cache_remove","qualname":"::Cached::cache_remove","value":"fn cache_remove(&mut Self, &K) -> Option<V>","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Remove a cached value\n","sig":null,"attributes":[{"value":"/ Remove a cached value","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15166,"byte_end":15191,"line_start":487,"line_end":487,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15324,"byte_end":15335,"line_start":491,"line_end":491,"column_start":8,"column_end":19},"name":"cache_clear","qualname":"::Cached::cache_clear","value":"fn cache_clear(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Remove all cached values. Keeps the allocated memory for reuse.\n","sig":null,"attributes":[{"value":"/ Remove all cached values. Keeps the allocated memory for reuse.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15249,"byte_end":15316,"line_start":490,"line_end":490,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15430,"byte_end":15441,"line_start":494,"line_end":494,"column_start":8,"column_end":19},"name":"cache_reset","qualname":"::Cached::cache_reset","value":"fn cache_reset(&mut Self)","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Remove all cached values. Free memory and return to initial state\n","sig":null,"attributes":[{"value":"/ Remove all cached values. Free memory and return to initial state","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15353,"byte_end":15422,"line_start":493,"line_end":493,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15521,"byte_end":15531,"line_start":497,"line_end":497,"column_start":8,"column_end":18},"name":"cache_size","qualname":"::Cached::cache_size","value":"fn cache_size(&Self) -> usize","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Return the current cache size (number of elements)\n","sig":null,"attributes":[{"value":"/ Return the current cache size (number of elements)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15459,"byte_end":15513,"line_start":496,"line_end":496,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15634,"byte_end":15644,"line_start":500,"line_end":500,"column_start":8,"column_end":18},"name":"cache_hits","qualname":"::Cached::cache_hits","value":"fn cache_hits(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Return the number of times a cached value was successfully retrieved\n","sig":null,"attributes":[{"value":"/ Return the number of times a cached value was successfully retrieved","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15554,"byte_end":15626,"line_start":499,"line_end":499,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15773,"byte_end":15785,"line_start":505,"line_end":505,"column_start":8,"column_end":20},"name":"cache_misses","qualname":"::Cached::cache_misses","value":"fn cache_misses(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Return the number of times a cached value was unable to be retrieved\n","sig":null,"attributes":[{"value":"/ Return the number of times a cached value was unable to be retrieved","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15693,"byte_end":15765,"line_start":504,"line_end":504,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15871,"byte_end":15885,"line_start":510,"line_end":510,"column_start":8,"column_end":22},"name":"cache_capacity","qualname":"::Cached::cache_capacity","value":"fn cache_capacity(&Self) -> Option<usize>","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Return the cache capacity\n","sig":null,"attributes":[{"value":"/ Return the cache capacity","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15834,"byte_end":15863,"line_start":509,"line_end":509,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":16003,"byte_end":16017,"line_start":515,"line_end":515,"column_start":8,"column_end":22},"name":"cache_lifespan","qualname":"::Cached::cache_lifespan","value":"fn cache_lifespan(&Self) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Return the lifespan of cached values (time to eviction)\n","sig":null,"attributes":[{"value":"/ Return the lifespan of cached values (time to eviction)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":15936,"byte_end":15995,"line_start":514,"line_end":514,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":16134,"byte_end":16152,"line_start":520,"line_end":520,"column_start":8,"column_end":26},"name":"cache_set_lifespan","qualname":"::Cached::cache_set_lifespan","value":"fn cache_set_lifespan(&mut Self, u64) -> Option<u64>","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Set the lifespan of cached values, returns the old value\n","sig":null,"attributes":[{"value":"/ Set the lifespan of cached values, returns the old value","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":16066,"byte_end":16126,"line_start":519,"line_end":519,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":16269,"byte_end":16280,"line_start":527,"line_end":527,"column_start":11,"column_end":22},"name":"CachedAsync","qualname":"::CachedAsync","value":"CachedAsync<K, V>","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":681}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"async\")","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":16218,"byte_end":16243,"line_start":525,"line_end":525,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":16302,"byte_end":16317,"line_start":528,"line_end":528,"column_start":14,"column_end":29},"name":"get_or_set_with","qualname":"::CachedAsync::get_or_set_with","value":"fn get_or_set_with<'life0, 'async_trait, F, Fut>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = &mut V> +\n    ::core::marker::Send + 'async_trait>> where V: Send, F: FnOnce() -> Fut +\nSend, Fut: Future<Output = V> + Send, F: 'async_trait, Fut: 'async_trait,\n'life0:'async_trait, Self: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":16244,"byte_end":16258,"line_start":526,"line_end":526,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":16475,"byte_end":16494,"line_start":534,"line_end":534,"column_start":14,"column_end":33},"name":"try_get_or_set_with","qualname":"::CachedAsync::try_get_or_set_with","value":"fn try_get_or_set_with<'life0, 'async_trait, F, Fut,\nE>(&'life0 mut Self, K, F)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =\n    Result<&mut V, E>> + ::core::marker::Send + 'async_trait>> where V: Send,\nF: FnOnce() -> Fut + Send, Fut: Future<Output = Result<V, E>> + Send,\nF: 'async_trait, Fut: 'async_trait, E: 'async_trait, 'life0:'async_trait,\nSelf: 'async_trait","parent":{"krate":0,"index":673},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":16244,"byte_end":16258,"line_start":526,"line_end":526,"column_start":1,"column_end":15}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lru_list.rs","byte_start":17653,"byte_end":17660,"line_start":17,"line_end":17,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lru_list.rs","byte_start":20594,"byte_end":20609,"line_start":122,"line_end":122,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30566,"byte_end":30576,"line_start":29,"line_end":29,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30955,"byte_end":30965,"line_start":44,"line_end":44,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":31411,"byte_end":31421,"line_start":61,"line_end":61,"column_start":19,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":31513,"byte_end":31523,"line_start":68,"line_end":68,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":37946,"byte_end":37956,"line_start":251,"line_end":251,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":40522,"byte_end":40532,"line_start":330,"line_end":330,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42399,"byte_end":42409,"line_start":392,"line_end":392,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52671,"byte_end":52681,"line_start":34,"line_end":34,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":53587,"byte_end":53597,"line_start":63,"line_end":63,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":57001,"byte_end":57011,"line_start":179,"line_end":179,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":63079,"byte_end":63094,"line_start":26,"line_end":26,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":64430,"byte_end":64445,"line_start":63,"line_end":63,"column_start":48,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66985,"byte_end":67000,"line_start":152,"line_end":152,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77709,"byte_end":77721,"line_start":24,"line_end":24,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77890,"byte_end":77902,"line_start":34,"line_end":34,"column_start":19,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77978,"byte_end":77990,"line_start":41,"line_end":41,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":78772,"byte_end":78784,"line_start":68,"line_end":68,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80432,"byte_end":80444,"line_start":131,"line_end":131,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":27694,"byte_end":27701,"line_start":20,"line_end":20,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28445,"byte_end":28452,"line_start":49,"line_end":49,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14235,"byte_end":14241,"line_start":455,"line_end":455,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":26}},{"kind":"Mod","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lib.rs","byte_start":14251,"byte_end":14257,"line_start":456,"line_end":456,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":32}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lru_list.rs","byte_start":17653,"byte_end":17660,"line_start":17,"line_end":17,"column_start":9,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\lru_list.rs","byte_start":20594,"byte_end":20609,"line_start":122,"line_end":122,"column_start":26,"column_end":41},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":442},"to":{"krate":2,"index":8193}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30566,"byte_end":30576,"line_start":29,"line_end":29,"column_start":27,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":451},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":30955,"byte_end":30965,"line_start":44,"line_end":44,"column_start":26,"column_end":36},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":451},"to":{"krate":2,"index":2802}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":31411,"byte_end":31421,"line_start":61,"line_end":61,"column_start":19,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":451},"to":{"krate":2,"index":2807}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":31513,"byte_end":31523,"line_start":68,"line_end":68,"column_start":31,"column_end":41},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":37946,"byte_end":37956,"line_start":251,"line_end":251,"column_start":12,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":40522,"byte_end":40532,"line_start":330,"line_end":330,"column_start":48,"column_end":58},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":451},"to":{"krate":0,"index":405}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\sized.rs","byte_start":42399,"byte_end":42409,"line_start":392,"line_end":392,"column_start":34,"column_end":44},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":451},"to":{"krate":0,"index":673}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":52671,"byte_end":52681,"line_start":34,"line_end":34,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":53587,"byte_end":53597,"line_start":63,"line_end":63,"column_start":40,"column_end":50},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":504},"to":{"krate":0,"index":405}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed.rs","byte_start":57001,"byte_end":57011,"line_start":179,"line_end":179,"column_start":34,"column_end":44},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":504},"to":{"krate":0,"index":673}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":63079,"byte_end":63094,"line_start":26,"line_end":26,"column_start":31,"column_end":46},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":64430,"byte_end":64445,"line_start":63,"line_end":63,"column_start":48,"column_end":63},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":549},"to":{"krate":0,"index":405}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\timed_sized.rs","byte_start":66985,"byte_end":67000,"line_start":152,"line_end":152,"column_start":34,"column_end":49},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":549},"to":{"krate":0,"index":673}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77709,"byte_end":77721,"line_start":24,"line_end":24,"column_start":26,"column_end":38},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":600},"to":{"krate":2,"index":2802}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77890,"byte_end":77902,"line_start":34,"line_end":34,"column_start":19,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":600},"to":{"krate":2,"index":2807}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":77978,"byte_end":77990,"line_start":41,"line_end":41,"column_start":23,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":78772,"byte_end":78784,"line_start":68,"line_end":68,"column_start":40,"column_end":52},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":600},"to":{"krate":0,"index":405}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\unbound.rs","byte_start":80432,"byte_end":80444,"line_start":131,"line_end":131,"column_start":34,"column_end":46},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":600},"to":{"krate":0,"index":673}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":27694,"byte_end":27701,"line_start":20,"line_end":20,"column_start":40,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":1265},"to":{"krate":0,"index":405}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cached-0.23.0\\src\\stores\\mod.rs","byte_start":28445,"byte_end":28452,"line_start":49,"line_end":49,"column_start":34,"column_end":41},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":1265},"to":{"krate":0,"index":673}}]}