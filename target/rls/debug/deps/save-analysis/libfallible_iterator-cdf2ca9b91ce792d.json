{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0","program":"C:\\Users\\EdsoLabs\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\bin\\rls.exe","arguments":["--crate-name","fallible_iterator","--edition=2018","C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=cdf2ca9b91ce792d","-C","extra-filename=-cdf2ca9b91ce792d","--out-dir","d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps","-L","dependency=d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\EdsoLabs\\.rustup/toolchains/stable-x86_64-pc-windows-gnu"],"output":"d:\\Work\\add_node_and_voting\\target\\rls\\debug\\deps\\libfallible_iterator-cdf2ca9b91ce792d.rmeta"},"prelude":{"crate_id":{"name":"fallible_iterator","disambiguator":[10805690409869756683,0]},"crate_root":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src","external_crates":[{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[3349811929551758155,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[1702804679386379989,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15672416423928090423,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":4,"id":{"name":"std","disambiguator":[14227917269865929319,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8598227792379188233,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[5769158474563825368,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3530648977582343522,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2506787063780951408,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[18217546505148666724,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1477758975480187253,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[7478112954929493085,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[8303736825855284965,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[6920191638365057331,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[8036275889558659698,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[11512984086232062831,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":16,"id":{"name":"gimli","disambiguator":[9271252611893390968,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":17,"id":{"name":"object","disambiguator":[9703519715559763083,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":18,"id":{"name":"memchr","disambiguator":[18086250815212929056,0]}},{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[3374753690728624589,0]}}],"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":0,"byte_end":67869,"line_start":1,"line_end":2606,"column_start":1,"column_end":82}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":0,"byte_end":67869,"line_start":1,"line_end":2606,"column_start":1,"column_end":82},"name":"","qualname":"::","value":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":188},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":226},{"krate":0,"index":232},{"krate":0,"index":239},{"krate":0,"index":244},{"krate":0,"index":250},{"krate":0,"index":255},{"krate":0,"index":630},{"krate":0,"index":635},{"krate":0,"index":639},{"krate":0,"index":261},{"krate":0,"index":274},{"krate":0,"index":643},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":660},{"krate":0,"index":664},{"krate":0,"index":284},{"krate":0,"index":299},{"krate":0,"index":668},{"krate":0,"index":672},{"krate":0,"index":675},{"krate":0,"index":307},{"krate":0,"index":321},{"krate":0,"index":332},{"krate":0,"index":678},{"krate":0,"index":682},{"krate":0,"index":685},{"krate":0,"index":336},{"krate":0,"index":349},{"krate":0,"index":688},{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":359},{"krate":0,"index":698},{"krate":0,"index":703},{"krate":0,"index":707},{"krate":0,"index":374},{"krate":0,"index":388},{"krate":0,"index":711},{"krate":0,"index":716},{"krate":0,"index":720},{"krate":0,"index":399},{"krate":0,"index":414},{"krate":0,"index":724},{"krate":0,"index":730},{"krate":0,"index":735},{"krate":0,"index":426},{"krate":0,"index":438},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":740},{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":455},{"krate":0,"index":750},{"krate":0,"index":755},{"krate":0,"index":759},{"krate":0,"index":468},{"krate":0,"index":480},{"krate":0,"index":763},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":489},{"krate":0,"index":494},{"krate":0,"index":773},{"krate":0,"index":778},{"krate":0,"index":782},{"krate":0,"index":497},{"krate":0,"index":514},{"krate":0,"index":525},{"krate":0,"index":534},{"krate":0,"index":786},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":796},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":552},{"krate":0,"index":563},{"krate":0,"index":806},{"krate":0,"index":813},{"krate":0,"index":818},{"krate":0,"index":570},{"krate":0,"index":823},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":579},{"krate":0,"index":833},{"krate":0,"index":839},{"krate":0,"index":843},{"krate":0,"index":586},{"krate":0,"index":847},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":594},{"krate":0,"index":858},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":602},{"krate":0,"index":868},{"krate":0,"index":874},{"krate":0,"index":878},{"krate":0,"index":609},{"krate":0,"index":882},{"krate":0,"index":886},{"krate":0,"index":889},{"krate":0,"index":616},{"krate":0,"index":892},{"krate":0,"index":898},{"krate":0,"index":902},{"krate":0,"index":622},{"krate":0,"index":629}],"decl_id":null,"docs":" \"Fallible\" iterators.","sig":null,"attributes":[{"value":"/ \"Fallible\" iterators.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":26,"byte_end":29,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The iterator APIs in the Rust standard library do not support iteration","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30,"byte_end":105,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ that can fail in a first class manner. These iterators are typically modeled","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":106,"byte_end":186,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ as iterating over `Result<T, E>` values; for example, the `Lines` iterator","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":187,"byte_end":265,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ returns `io::Result<String>`s. When simply iterating over these types, the","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":266,"byte_end":344,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ value being iterated over must be unwrapped in some way before it can be","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":345,"byte_end":421,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ used:","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":422,"byte_end":431,"line_start":8,"line_end":8,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":432,"byte_end":435,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":436,"byte_end":449,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/ for line in reader.lines() {","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":450,"byte_end":482,"line_start":11,"line_end":11,"column_start":1,"column_end":33}},{"value":"/     let line = line?;","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":483,"byte_end":508,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/     // work with line","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":509,"byte_end":534,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"/ }","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":535,"byte_end":540,"line_start":14,"line_end":14,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":541,"byte_end":548,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":549,"byte_end":552,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ In addition, many of the additional methods on the `Iterator` trait will","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":553,"byte_end":629,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ not behave properly in the presence of errors when working with these kinds","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":630,"byte_end":709,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ of iterators. For example, if one wanted to count the number of lines of","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":710,"byte_end":786,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ text in a `Read`er, this might be a way to go about it:","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":787,"byte_end":846,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":847,"byte_end":850,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":851,"byte_end":864,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ let count = reader.lines().count();","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":865,"byte_end":904,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":905,"byte_end":912,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":913,"byte_end":916,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This will return the proper value when the reader operates successfully, but","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":917,"byte_end":997,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ if it encounters an IO error, the result will either be slightly higher than","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":998,"byte_end":1078,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ expected if the error is transient, or it may run forever if the error is","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1079,"byte_end":1156,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ returned repeatedly!","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1157,"byte_end":1181,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1182,"byte_end":1185,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ In contrast, a fallible iterator is built around the concept that a call to","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1186,"byte_end":1265,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ `next` can fail. The trait has an additional `Error` associated type in","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1266,"byte_end":1341,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/ addition to the `Item` type, and `next` returns `Result<Option<Self::Item>,","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1342,"byte_end":1421,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ Self::Error>` rather than `Option<Self::Item>`. Methods like `count` return","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1422,"byte_end":1501,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ `Result`s as well.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1502,"byte_end":1524,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1525,"byte_end":1528,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ This does mean that fallible iterators are incompatible with Rust's `for`","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1529,"byte_end":1606,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ loop syntax, but `while let` loops offer a similar level of ergonomics:","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1607,"byte_end":1682,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1683,"byte_end":1686,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1687,"byte_end":1700,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/ while let Some(item) = iter.next()? {","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1701,"byte_end":1742,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/     // work with item","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1743,"byte_end":1768,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/ }","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1769,"byte_end":1774,"line_start":43,"line_end":43,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1775,"byte_end":1782,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1783,"byte_end":1786,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ## Fallible closure arguments","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1787,"byte_end":1820,"line_start":46,"line_end":46,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1821,"byte_end":1824,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Like `Iterator`, many `FallibleIterator` methods take closures as arguments.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1825,"byte_end":1905,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ These use the same signatures as their `Iterator` counterparts, except that","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1906,"byte_end":1985,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/ `FallibleIterator` expects the closures to be fallible: they return","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":1986,"byte_end":2057,"line_start":50,"line_end":50,"column_start":1,"column_end":72}},{"value":"/ `Result<T, Self::Error>` instead of simply `T`.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2058,"byte_end":2109,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2110,"byte_end":2113,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ For example, the standard library's `Iterator::filter` adapter method","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2114,"byte_end":2187,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/ filters the underlying iterator according to a predicate provided by the","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2188,"byte_end":2264,"line_start":54,"line_end":54,"column_start":1,"column_end":77}},{"value":"/ user, whose return type is `bool`. In `FallibleIterator::filter`, however,","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2265,"byte_end":2343,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/ the predicate returns `Result<bool, Self::Error>`:","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2344,"byte_end":2398,"line_start":56,"line_end":56,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2399,"byte_end":2402,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2403,"byte_end":2410,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/ # use std::error::Error;","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2411,"byte_end":2439,"line_start":59,"line_end":59,"column_start":1,"column_end":29}},{"value":"/ # use std::str::FromStr;","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2440,"byte_end":2468,"line_start":60,"line_end":60,"column_start":1,"column_end":29}},{"value":"/ # use fallible_iterator::{convert, FallibleIterator};","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2469,"byte_end":2526,"line_start":61,"line_end":61,"column_start":1,"column_end":58}},{"value":"/ let numbers = convert(\"100\\n200\\nfern\\n400\".lines().map(Ok::<&str, Box<Error>>));","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2527,"byte_end":2612,"line_start":62,"line_end":62,"column_start":1,"column_end":86}},{"value":"/ let big_numbers = numbers.filter(|n| Ok(u64::from_str(n)? > 100));","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2613,"byte_end":2683,"line_start":63,"line_end":63,"column_start":1,"column_end":71}},{"value":"/ assert!(big_numbers.count().is_err());","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2684,"byte_end":2726,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2727,"byte_end":2734,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2800,"byte_end":2822,"line_start":67,"line_end":67,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":2871,"byte_end":2881,"line_start":69,"line_end":69,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4282,"byte_end":4298,"line_start":132,"line_end":132,"column_start":11,"column_end":27},"name":"FallibleIterator","qualname":"::FallibleIterator","value":"FallibleIterator","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":185}],"decl_id":null,"docs":" An `Iterator`-like trait that allows for calculation of items to fail.\n","sig":null,"attributes":[{"value":"/ An `Iterator`-like trait that allows for calculation of items to fail.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4197,"byte_end":4271,"line_start":131,"line_end":131,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4348,"byte_end":4352,"line_start":134,"line_end":134,"column_start":10,"column_end":14},"name":"Item","qualname":"::FallibleIterator::Item","value":"type Item;","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" The type being iterated over.\n","sig":null,"attributes":[{"value":"/ The type being iterated over.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4305,"byte_end":4338,"line_start":133,"line_end":133,"column_start":5,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4388,"byte_end":4393,"line_start":137,"line_end":137,"column_start":10,"column_end":15},"name":"Error","qualname":"::FallibleIterator::Error","value":"type Error;","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" The error type.\n","sig":null,"attributes":[{"value":"/ The error type.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4359,"byte_end":4378,"line_start":136,"line_end":136,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4667,"byte_end":4671,"line_start":145,"line_end":145,"column_start":8,"column_end":12},"name":"next","qualname":"::FallibleIterator::next","value":"fn next(&mut Self) -> Result<Option<Self::Item>, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next value.","sig":null,"attributes":[{"value":"/ Advances the iterator and returns the next value.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4400,"byte_end":4453,"line_start":139,"line_end":139,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4458,"byte_end":4461,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(None)` when iteration is finished.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4466,"byte_end":4516,"line_start":141,"line_end":141,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4521,"byte_end":4524,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ The behavior of calling this method after a previous call has returned","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4529,"byte_end":4603,"line_start":143,"line_end":143,"column_start":5,"column_end":79}},{"value":"/ `Ok(None)` or `Err` is implemenetation defined.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4608,"byte_end":4659,"line_start":144,"line_end":144,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5383,"byte_end":5392,"line_start":162,"line_end":162,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::FallibleIterator::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns bounds on the remaining length of the iterator.","sig":null,"attributes":[{"value":"/ Returns bounds on the remaining length of the iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4732,"byte_end":4791,"line_start":147,"line_end":147,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4796,"byte_end":4799,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Specifically, the first half of the returned tuple is a lower bound and","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4804,"byte_end":4879,"line_start":149,"line_end":149,"column_start":5,"column_end":80}},{"value":"/ the second half is an upper bound.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4884,"byte_end":4922,"line_start":150,"line_end":150,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4927,"byte_end":4930,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ For the upper bound, `None` indicates that the upper bound is either","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":4935,"byte_end":5007,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/ unknown or larger than can be represented as a `usize`.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5012,"byte_end":5071,"line_start":153,"line_end":153,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5076,"byte_end":5079,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Both bounds assume that all remaining calls to `next` succeed. That is,","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5084,"byte_end":5159,"line_start":155,"line_end":155,"column_start":5,"column_end":80}},{"value":"/ `next` could return an `Err` in fewer calls than specified by the lower","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5164,"byte_end":5239,"line_start":156,"line_end":156,"column_start":5,"column_end":80}},{"value":"/ bound.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5244,"byte_end":5254,"line_start":157,"line_end":157,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5259,"byte_end":5262,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The default implementation returns `(0, None)`, which is correct for","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5267,"byte_end":5339,"line_start":159,"line_end":159,"column_start":5,"column_end":77}},{"value":"/ any iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5344,"byte_end":5361,"line_start":160,"line_end":160,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5366,"byte_end":5375,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5546,"byte_end":5551,"line_start":168,"line_end":168,"column_start":8,"column_end":13},"name":"count","qualname":"::FallibleIterator::count","value":"fn count(Self) -> Result<usize, Self::Error> where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Consumes the iterator, returning the number of remaining items.\n","sig":null,"attributes":[{"value":"/ Consumes the iterator, returning the number of remaining items.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5457,"byte_end":5524,"line_start":166,"line_end":166,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5529,"byte_end":5538,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5742,"byte_end":5746,"line_start":177,"line_end":177,"column_start":8,"column_end":12},"name":"last","qualname":"::FallibleIterator::last","value":"fn last(Self) -> Result<Option<Self::Item>, Self::Error> where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the last element of the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the last element of the iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5675,"byte_end":5720,"line_start":175,"line_end":175,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5725,"byte_end":5734,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5956,"byte_end":5959,"line_start":186,"line_end":186,"column_start":8,"column_end":11},"name":"nth","qualname":"::FallibleIterator::nth","value":"fn nth(&mut Self, usize) -> Result<Option<Self::Item>, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the `n`th element of the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the `n`th element of the iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5888,"byte_end":5934,"line_start":184,"line_end":184,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":5939,"byte_end":5948,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6394,"byte_end":6401,"line_start":202,"line_end":202,"column_start":8,"column_end":15},"name":"step_by","qualname":"::FallibleIterator::step_by","value":"fn step_by(Self, usize) -> StepBy<Self> where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator starting at the same point, but stepping by the given amount at each iteration.","sig":null,"attributes":[{"value":"/ Returns an iterator starting at the same point, but stepping by the given amount at each iteration.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6205,"byte_end":6308,"line_start":196,"line_end":196,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6313,"byte_end":6316,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6321,"byte_end":6333,"line_start":198,"line_end":198,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6338,"byte_end":6341,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ Panics if `step` is 0.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6346,"byte_end":6372,"line_start":200,"line_end":200,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6377,"byte_end":6386,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6737,"byte_end":6742,"line_start":217,"line_end":217,"column_start":8,"column_end":13},"name":"chain","qualname":"::FallibleIterator::chain","value":"fn chain<I>(Self, I) -> Chain<Self, I> where I: IntoFallibleIterator<Item =\nSelf::Item, Error = Self::Item>, Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which yields the elements of this iterator followed\n by another.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which yields the elements of this iterator followed","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6620,"byte_end":6695,"line_start":214,"line_end":214,"column_start":5,"column_end":80}},{"value":"/ by another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6700,"byte_end":6715,"line_start":215,"line_end":215,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":6720,"byte_end":6729,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7129,"byte_end":7132,"line_start":232,"line_end":232,"column_start":8,"column_end":11},"name":"zip","qualname":"::FallibleIterator::zip","value":"fn zip<I>(Self, I) -> Zip<Self, I::IntoFallibleIter> where Self: Sized,\nI: IntoFallibleIterator<Error = Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator that yields pairs of this iterator's and another\n iterator's values.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that yields pairs of this iterator's and another","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7008,"byte_end":7080,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ iterator's values.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7085,"byte_end":7107,"line_start":230,"line_end":230,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7112,"byte_end":7121,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7458,"byte_end":7461,"line_start":243,"line_end":243,"column_start":8,"column_end":11},"name":"map","qualname":"::FallibleIterator::map","value":"fn map<F, B>(Self, F) -> Map<Self, F> where Self: Sized, F: FnMut(Self::Item)\n-> Result<B, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which applies a fallible transform to the elements\n of the underlying iterator.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which applies a fallible transform to the elements","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7326,"byte_end":7400,"line_start":240,"line_end":240,"column_start":5,"column_end":79}},{"value":"/ of the underlying iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7405,"byte_end":7436,"line_start":241,"line_end":241,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7441,"byte_end":7450,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7713,"byte_end":7721,"line_start":253,"line_end":253,"column_start":8,"column_end":16},"name":"for_each","qualname":"::FallibleIterator::for_each","value":"fn for_each<F>(Self, F) -> Result<(), Self::Error> where Self: Sized,\nF: FnMut(Self::Item) -> Result<(), Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Calls a fallible closure on each element of an iterator.\n","sig":null,"attributes":[{"value":"/ Calls a fallible closure on each element of an iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7631,"byte_end":7691,"line_start":251,"line_end":251,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7696,"byte_end":7705,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8113,"byte_end":8119,"line_start":265,"line_end":265,"column_start":8,"column_end":14},"name":"filter","qualname":"::FallibleIterator::filter","value":"fn filter<F>(Self, F) -> Filter<Self, F> where Self: Sized,\nF: FnMut(&Self::Item) -> Result<bool, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which uses a predicate to determine which values\n should be yielded. The predicate may fail; such failures are passed to\n the caller.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which uses a predicate to determine which values","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7920,"byte_end":7992,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ should be yielded. The predicate may fail; such failures are passed to","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":7997,"byte_end":8071,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"/ the caller.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8076,"byte_end":8091,"line_start":263,"line_end":263,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8096,"byte_end":8105,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8448,"byte_end":8458,"line_start":276,"line_end":276,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::FallibleIterator::filter_map","value":"fn filter_map<B, F>(Self, F) -> FilterMap<Self, F> where Self: Sized,\nF: FnMut(Self::Item) -> Result<Option<B>, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which both filters and maps. The closure may fail;\n such failures are passed along to the consumer.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which both filters and maps. The closure may fail;","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8296,"byte_end":8370,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ such failures are passed along to the consumer.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8375,"byte_end":8426,"line_start":274,"line_end":274,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8431,"byte_end":8440,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8764,"byte_end":8773,"line_start":287,"line_end":287,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::FallibleIterator::enumerate","value":"fn enumerate(Self) -> Enumerate<Self> where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which yields the current iteration count as well\n as the value.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which yields the current iteration count as well","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8648,"byte_end":8720,"line_start":284,"line_end":284,"column_start":5,"column_end":77}},{"value":"/ as the value.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8725,"byte_end":8742,"line_start":285,"line_end":285,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8747,"byte_end":8756,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8993,"byte_end":9001,"line_start":297,"line_end":297,"column_start":8,"column_end":16},"name":"peekable","qualname":"::FallibleIterator::peekable","value":"fn peekable(Self) -> Peekable<Self> where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator that can peek at the next element without consuming\n it.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that can peek at the next element without consuming","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8884,"byte_end":8959,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ it.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8964,"byte_end":8971,"line_start":295,"line_end":295,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":8976,"byte_end":8985,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":9236,"byte_end":9246,"line_start":309,"line_end":309,"column_start":8,"column_end":18},"name":"skip_while","qualname":"::FallibleIterator::skip_while","value":"fn skip_while<P>(Self, P) -> SkipWhile<Self, P> where Self: Sized,\nP: FnMut(&Self::Item) -> Result<bool, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator that skips elements based on a predicate.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that skips elements based on a predicate.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":9149,"byte_end":9214,"line_start":307,"line_end":307,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":9219,"byte_end":9228,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":9588,"byte_end":9598,"line_start":323,"line_end":323,"column_start":8,"column_end":18},"name":"take_while","qualname":"::FallibleIterator::take_while","value":"fn take_while<P>(Self, P) -> TakeWhile<Self, P> where Self: Sized,\nP: FnMut(&Self::Item) -> Result<bool, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator that yields elements based on a predicate.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that yields elements based on a predicate.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":9500,"byte_end":9566,"line_start":321,"line_end":321,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":9571,"byte_end":9580,"line_start":322,"line_end":322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":9948,"byte_end":9952,"line_start":337,"line_end":337,"column_start":8,"column_end":12},"name":"skip","qualname":"::FallibleIterator::skip","value":"fn skip(Self, usize) -> Skip<Self> where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which skips the first `n` values of this iterator.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which skips the first `n` values of this iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":9852,"byte_end":9926,"line_start":335,"line_end":335,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":9931,"byte_end":9940,"line_start":336,"line_end":336,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10169,"byte_end":10173,"line_start":347,"line_end":347,"column_start":8,"column_end":12},"name":"take","qualname":"::FallibleIterator::take","value":"fn take(Self, usize) -> Take<Self> where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator that yields only the first `n` values of this\n iterator.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that yields only the first `n` values of this","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10060,"byte_end":10129,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10134,"byte_end":10147,"line_start":345,"line_end":345,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10152,"byte_end":10161,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10435,"byte_end":10439,"line_start":360,"line_end":360,"column_start":8,"column_end":12},"name":"scan","qualname":"::FallibleIterator::scan","value":"fn scan<St, B, F>(Self, St, F) -> Scan<Self, St, F> where Self: Sized,\nF: FnMut(&mut St, Self::Item) -> Result<Option<B>, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which applies a stateful map to values of this\n iterator.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which applies a stateful map to values of this","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10325,"byte_end":10395,"line_start":357,"line_end":357,"column_start":5,"column_end":75}},{"value":"/ iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10400,"byte_end":10413,"line_start":358,"line_end":358,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10418,"byte_end":10427,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10848,"byte_end":10856,"line_start":374,"line_end":374,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::FallibleIterator::flat_map","value":"fn flat_map<U, F>(Self, F) -> FlatMap<Self, U, F> where Self: Sized,\nU: IntoFallibleIterator<Error = Self::Error>, F: FnMut(Self::Item) ->\nResult<U, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which maps this iterator's elements to iterators, yielding those iterators' values.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which maps this iterator's elements to iterators, yielding those iterators' values.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10719,"byte_end":10826,"line_start":372,"line_end":372,"column_start":5,"column_end":112}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":10831,"byte_end":10840,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11256,"byte_end":11263,"line_start":388,"line_end":388,"column_start":8,"column_end":15},"name":"flatten","qualname":"::FallibleIterator::flatten","value":"fn flatten(Self) -> Flatten<Self> where Self: Sized,\nSelf::Item: IntoFallibleIterator<Error = Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which flattens an iterator of iterators, yielding those iterators' values.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which flattens an iterator of iterators, yielding those iterators' values.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11136,"byte_end":11234,"line_start":386,"line_end":386,"column_start":5,"column_end":103}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11239,"byte_end":11248,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11820,"byte_end":11824,"line_start":406,"line_end":406,"column_start":8,"column_end":12},"name":"fuse","qualname":"::FallibleIterator::fuse","value":"fn fuse(Self) -> Fuse<Self> where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which yields this iterator's elements and ends after\n the first `Ok(None)`.","sig":null,"attributes":[{"value":"/ Returns an iterator which yields this iterator's elements and ends after","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11471,"byte_end":11547,"line_start":399,"line_end":399,"column_start":5,"column_end":81}},{"value":"/ the first `Ok(None)`.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11552,"byte_end":11577,"line_start":400,"line_end":400,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11582,"byte_end":11585,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ The behavior of calling `next` after it has previously returned","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11590,"byte_end":11657,"line_start":402,"line_end":402,"column_start":5,"column_end":72}},{"value":"/ `Ok(None)` is normally unspecified. The iterator returned by this method","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11662,"byte_end":11738,"line_start":403,"line_end":403,"column_start":5,"column_end":81}},{"value":"/ guarantees that `Ok(None)` will always be returned.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11743,"byte_end":11798,"line_start":404,"line_end":404,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11803,"byte_end":11812,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12070,"byte_end":12077,"line_start":418,"line_end":418,"column_start":8,"column_end":15},"name":"inspect","qualname":"::FallibleIterator::inspect","value":"fn inspect<F>(Self, F) -> Inspect<Self, F> where Self: Sized,\nF: FnMut(&Self::Item) -> Result<(), Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which passes each element to a closure before returning it.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which passes each element to a closure before returning it.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":11965,"byte_end":12048,"line_start":416,"line_end":416,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12053,"byte_end":12062,"line_start":417,"line_end":417,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12438,"byte_end":12444,"line_start":431,"line_end":431,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::FallibleIterator::by_ref","value":"fn by_ref(&mut Self) -> &mut Self where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Borrow an iterator rather than consuming it.","sig":null,"attributes":[{"value":"/ Borrow an iterator rather than consuming it.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12251,"byte_end":12299,"line_start":426,"line_end":426,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12304,"byte_end":12307,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ This is useful to allow the use of iterator adaptors that would","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12312,"byte_end":12379,"line_start":428,"line_end":428,"column_start":5,"column_end":72}},{"value":"/ otherwise consume the value.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12384,"byte_end":12416,"line_start":429,"line_end":429,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12421,"byte_end":12430,"line_start":430,"line_end":430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12683,"byte_end":12690,"line_start":442,"line_end":442,"column_start":8,"column_end":15},"name":"collect","qualname":"::FallibleIterator::collect","value":"fn collect<T>(Self) -> Result<T, Self::Error> where\nT: FromFallibleIterator<Self::Item>, Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Transforms the iterator into a collection.","sig":null,"attributes":[{"value":"/ Transforms the iterator into a collection.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12530,"byte_end":12576,"line_start":438,"line_end":438,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12581,"byte_end":12584,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ An `Err` will be returned if any invocation of `next` returns `Err`.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12589,"byte_end":12661,"line_start":440,"line_end":440,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12666,"byte_end":12675,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12962,"byte_end":12971,"line_start":452,"line_end":452,"column_start":8,"column_end":17},"name":"partition","qualname":"::FallibleIterator::partition","value":"fn partition<B, F>(Self, F) -> Result<(B, B), Self::Error> where Self: Sized,\nB: Default + Extend<Self::Item>, F: FnMut(&Self::Item) ->\nResult<bool, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Transforms the iterator into two collections, partitioning elements by a closure.\n","sig":null,"attributes":[{"value":"/ Transforms the iterator into two collections, partitioning elements by a closure.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12855,"byte_end":12940,"line_start":450,"line_end":450,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":12945,"byte_end":12954,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":13571,"byte_end":13575,"line_start":476,"line_end":476,"column_start":8,"column_end":12},"name":"fold","qualname":"::FallibleIterator::fold","value":"fn fold<B, F>(Self, B, F) -> Result<B, Self::Error> where Self: Sized,\nF: FnMut(B, Self::Item) -> Result<B, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Applies a function over the elements of the iterator, producing a single\n final value.\n","sig":null,"attributes":[{"value":"/ Applies a function over the elements of the iterator, producing a single","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":13452,"byte_end":13528,"line_start":473,"line_end":473,"column_start":5,"column_end":81}},{"value":"/ final value.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":13533,"byte_end":13549,"line_start":474,"line_end":474,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":13554,"byte_end":13563,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":13964,"byte_end":13972,"line_start":488,"line_end":488,"column_start":8,"column_end":16},"name":"try_fold","qualname":"::FallibleIterator::try_fold","value":"fn try_fold<B, E, F>(&mut Self, B, F) -> Result<B, E> where Self: Sized,\nE: From<Self::Error>, F: FnMut(B, Self::Item) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Applies a function over the elements of the iterator, producing a single final value.","sig":null,"attributes":[{"value":"/ Applies a function over the elements of the iterator, producing a single final value.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":13771,"byte_end":13860,"line_start":484,"line_end":484,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":13865,"byte_end":13868,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ This is used as the \"base\" of many methods on `FallibleIterator`.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":13873,"byte_end":13942,"line_start":486,"line_end":486,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":13947,"byte_end":13956,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":14349,"byte_end":14352,"line_start":502,"line_end":502,"column_start":8,"column_end":11},"name":"all","qualname":"::FallibleIterator::all","value":"fn all<F>(&mut Self, F) -> Result<bool, Self::Error> where Self: Sized,\nF: FnMut(Self::Item) -> Result<bool, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Determines if all elements of this iterator match a predicate.\n","sig":null,"attributes":[{"value":"/ Determines if all elements of this iterator match a predicate.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":14261,"byte_end":14327,"line_start":500,"line_end":500,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":14332,"byte_end":14341,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":14805,"byte_end":14808,"line_start":519,"line_end":519,"column_start":8,"column_end":11},"name":"any","qualname":"::FallibleIterator::any","value":"fn any<F>(&mut Self, F) -> Result<bool, Self::Error> where Self: Sized,\nF: FnMut(Self::Item) -> Result<bool, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Determines if any element of this iterator matches a predicate.\n","sig":null,"attributes":[{"value":"/ Determines if any element of this iterator matches a predicate.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":14716,"byte_end":14783,"line_start":517,"line_end":517,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":14788,"byte_end":14797,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":15264,"byte_end":15268,"line_start":536,"line_end":536,"column_start":8,"column_end":12},"name":"find","qualname":"::FallibleIterator::find","value":"fn find<F>(&mut Self, F) -> Result<Option<Self::Item>, Self::Error> where\nSelf: Sized, F: FnMut(&Self::Item) -> Result<bool, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the first element of the iterator that matches a predicate.\n","sig":null,"attributes":[{"value":"/ Returns the first element of the iterator that matches a predicate.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":15171,"byte_end":15242,"line_start":534,"line_end":534,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":15247,"byte_end":15256,"line_start":535,"line_end":535,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":15765,"byte_end":15773,"line_start":553,"line_end":553,"column_start":8,"column_end":16},"name":"find_map","qualname":"::FallibleIterator::find_map","value":"fn find_map<B, F>(&mut Self, F) -> Result<Option<B>, Self::Error> where\nSelf: Sized, F: FnMut(Self::Item) -> Result<Option<B>, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Applies a function to the elements of the iterator, returning the first non-`None` result.\n","sig":null,"attributes":[{"value":"/ Applies a function to the elements of the iterator, returning the first non-`None` result.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":15649,"byte_end":15743,"line_start":551,"line_end":551,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":15748,"byte_end":15757,"line_start":552,"line_end":552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16169,"byte_end":16177,"line_start":565,"line_end":565,"column_start":8,"column_end":16},"name":"position","qualname":"::FallibleIterator::position","value":"fn position<F>(&mut Self, F) -> Result<Option<usize>, Self::Error> where\nSelf: Sized, F: FnMut(Self::Item) -> Result<bool, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the position of the first element of this iterator that matches\n a predicate. The predicate may fail; such failures are returned to the\n caller.\n","sig":null,"attributes":[{"value":"/ Returns the position of the first element of this iterator that matches","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":15977,"byte_end":16052,"line_start":561,"line_end":561,"column_start":5,"column_end":80}},{"value":"/ a predicate. The predicate may fail; such failures are returned to the","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16057,"byte_end":16131,"line_start":562,"line_end":562,"column_start":5,"column_end":79}},{"value":"/ caller.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16136,"byte_end":16147,"line_start":563,"line_end":563,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16152,"byte_end":16161,"line_start":564,"line_end":564,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16621,"byte_end":16624,"line_start":582,"line_end":582,"column_start":8,"column_end":11},"name":"max","qualname":"::FallibleIterator::max","value":"fn max(Self) -> Result<Option<Self::Item>, Self::Error> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the maximal element of the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the maximal element of the iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16551,"byte_end":16599,"line_start":580,"line_end":580,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16604,"byte_end":16613,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16906,"byte_end":16916,"line_start":593,"line_end":593,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::FallibleIterator::max_by_key","value":"fn max_by_key<B, F>(Self, F) -> Result<Option<Self::Item>, Self::Error> where\nSelf: Sized, B: Ord, F: FnMut(&Self::Item) -> Result<B, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the element of the iterator which gives the maximum value from\n the function.\n","sig":null,"attributes":[{"value":"/ Returns the element of the iterator which gives the maximum value from","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16788,"byte_end":16862,"line_start":590,"line_end":590,"column_start":5,"column_end":79}},{"value":"/ the function.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16867,"byte_end":16884,"line_start":591,"line_end":591,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":16889,"byte_end":16898,"line_start":592,"line_end":592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":17579,"byte_end":17585,"line_start":617,"line_end":617,"column_start":8,"column_end":14},"name":"max_by","qualname":"::FallibleIterator::max_by","value":"fn max_by<F>(Self, F) -> Result<Option<Self::Item>, Self::Error> where\nSelf: Sized, F: FnMut(&Self::Item, &Self::Item) ->\nResult<Ordering, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the element that gives the maximum value with respect to the function.\n","sig":null,"attributes":[{"value":"/ Returns the element that gives the maximum value with respect to the function.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":17475,"byte_end":17557,"line_start":615,"line_end":615,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":17562,"byte_end":17571,"line_start":616,"line_end":616,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":18157,"byte_end":18160,"line_start":639,"line_end":639,"column_start":8,"column_end":11},"name":"min","qualname":"::FallibleIterator::min","value":"fn min(Self) -> Result<Option<Self::Item>, Self::Error> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the minimal element of the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the minimal element of the iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":18087,"byte_end":18135,"line_start":637,"line_end":637,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":18140,"byte_end":18149,"line_start":638,"line_end":638,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":18442,"byte_end":18452,"line_start":650,"line_end":650,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::FallibleIterator::min_by_key","value":"fn min_by_key<B, F>(Self, F) -> Result<Option<Self::Item>, Self::Error> where\nSelf: Sized, B: Ord, F: FnMut(&Self::Item) -> Result<B, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the element of the iterator which gives the minimum value from\n the function.\n","sig":null,"attributes":[{"value":"/ Returns the element of the iterator which gives the minimum value from","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":18324,"byte_end":18398,"line_start":647,"line_end":647,"column_start":5,"column_end":79}},{"value":"/ the function.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":18403,"byte_end":18420,"line_start":648,"line_end":648,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":18425,"byte_end":18434,"line_start":649,"line_end":649,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19115,"byte_end":19121,"line_start":674,"line_end":674,"column_start":8,"column_end":14},"name":"min_by","qualname":"::FallibleIterator::min_by","value":"fn min_by<F>(Self, F) -> Result<Option<Self::Item>, Self::Error> where\nSelf: Sized, F: FnMut(&Self::Item, &Self::Item) ->\nResult<Ordering, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns the element that gives the minimum value with respect to the function.\n","sig":null,"attributes":[{"value":"/ Returns the element that gives the minimum value with respect to the function.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19011,"byte_end":19093,"line_start":672,"line_end":672,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19098,"byte_end":19107,"line_start":673,"line_end":673,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19730,"byte_end":19733,"line_start":697,"line_end":697,"column_start":8,"column_end":11},"name":"rev","qualname":"::FallibleIterator::rev","value":"fn rev(Self) -> Rev<Self> where Self: Sized + DoubleEndedFallibleIterator","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator that yields this iterator's items in the opposite\n order.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that yields this iterator's items in the opposite","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19620,"byte_end":19693,"line_start":694,"line_end":694,"column_start":5,"column_end":78}},{"value":"/ order.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19698,"byte_end":19708,"line_start":695,"line_end":695,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19713,"byte_end":19722,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19931,"byte_end":19936,"line_start":706,"line_end":706,"column_start":8,"column_end":13},"name":"unzip","qualname":"::FallibleIterator::unzip","value":"fn unzip<A, B, FromA, FromB>(Self) -> Result<(FromA, FromB), Self::Error>\nwhere Self: Sized + FallibleIterator<Item = (A, B)>, FromA: Default +\nExtend<A>, FromB: Default + Extend<B>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Converts an iterator of pairs into a pair of containers.\n","sig":null,"attributes":[{"value":"/ Converts an iterator of pairs into a pair of containers.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19849,"byte_end":19909,"line_start":704,"line_end":704,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":19914,"byte_end":19923,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":20489,"byte_end":20495,"line_start":726,"line_end":726,"column_start":8,"column_end":14},"name":"cloned","qualname":"::FallibleIterator::cloned","value":"fn cloned<'a, T>(Self) -> Cloned<Self> where Self: Sized +\nFallibleIterator<Item = &'a T>, T: 'a + Clone","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which clones all of its elements.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which clones all of its elements.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":20410,"byte_end":20467,"line_start":724,"line_end":724,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":20472,"byte_end":20481,"line_start":725,"line_end":725,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":20733,"byte_end":20738,"line_start":736,"line_end":736,"column_start":8,"column_end":13},"name":"cycle","qualname":"::FallibleIterator::cycle","value":"fn cycle(Self) -> Cycle<Self> where Self: Sized + Clone","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which repeas this iterator endlessly.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which repeas this iterator endlessly.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":20650,"byte_end":20711,"line_start":734,"line_end":734,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":20716,"byte_end":20725,"line_start":735,"line_end":735,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":21005,"byte_end":21008,"line_start":749,"line_end":749,"column_start":8,"column_end":11},"name":"cmp","qualname":"::FallibleIterator::cmp","value":"fn cmp<I>(Self, I) -> Result<Ordering, Self::Error> where Self: Sized,\nI: IntoFallibleIterator<Item = Self::Item, Error = Self::Item>,\nSelf::Item: Ord","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this iterator to that of\n another.\n","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this iterator to that of","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":20895,"byte_end":20966,"line_start":746,"line_end":746,"column_start":5,"column_end":76}},{"value":"/ another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":20971,"byte_end":20983,"line_start":747,"line_end":747,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":20988,"byte_end":20997,"line_start":748,"line_end":748,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":21794,"byte_end":21805,"line_start":773,"line_end":773,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::FallibleIterator::partial_cmp","value":"fn partial_cmp<I>(Self, I) -> Result<Option<Ordering>, Self::Error> where\nSelf: Sized, I: IntoFallibleIterator<Error = Self::Error>,\nSelf::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this iterator to that of\n another.\n","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this iterator to that of","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":21684,"byte_end":21755,"line_start":770,"line_end":770,"column_start":5,"column_end":76}},{"value":"/ another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":21760,"byte_end":21772,"line_start":771,"line_end":771,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":21777,"byte_end":21786,"line_start":772,"line_end":772,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":22626,"byte_end":22628,"line_start":797,"line_end":797,"column_start":8,"column_end":10},"name":"eq","qualname":"::FallibleIterator::eq","value":"fn eq<I>(Self, I) -> Result<bool, Self::Error> where Self: Sized,\nI: IntoFallibleIterator<Error = Self::Error>, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Determines if the elements of this iterator are equal to those of\n another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this iterator are equal to those of","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":22518,"byte_end":22587,"line_start":794,"line_end":794,"column_start":5,"column_end":74}},{"value":"/ another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":22592,"byte_end":22604,"line_start":795,"line_end":795,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":22609,"byte_end":22618,"line_start":796,"line_end":796,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":23339,"byte_end":23341,"line_start":821,"line_end":821,"column_start":8,"column_end":10},"name":"ne","qualname":"::FallibleIterator::ne","value":"fn ne<I>(Self, I) -> Result<bool, Self::Error> where Self: Sized,\nI: IntoFallibleIterator<Error = Self::Error>, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Determines if the elements of this iterator are not equal to those of\n another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this iterator are not equal to those of","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":23227,"byte_end":23300,"line_start":818,"line_end":818,"column_start":5,"column_end":78}},{"value":"/ another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":23305,"byte_end":23317,"line_start":819,"line_end":819,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":23322,"byte_end":23331,"line_start":820,"line_end":820,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":24066,"byte_end":24068,"line_start":845,"line_end":845,"column_start":8,"column_end":10},"name":"lt","qualname":"::FallibleIterator::lt","value":"fn lt<I>(Self, I) -> Result<bool, Self::Error> where Self: Sized,\nI: IntoFallibleIterator<Error = Self::Error>, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Determines if the elements of this iterator are lexicographically less\n than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this iterator are lexicographically less","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":23939,"byte_end":24013,"line_start":842,"line_end":842,"column_start":5,"column_end":79}},{"value":"/ than those of another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":24018,"byte_end":24044,"line_start":843,"line_end":843,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":24049,"byte_end":24058,"line_start":844,"line_end":844,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":24991,"byte_end":24993,"line_start":871,"line_end":871,"column_start":8,"column_end":10},"name":"le","qualname":"::FallibleIterator::le","value":"fn le<I>(Self, I) -> Result<bool, Self::Error> where Self: Sized,\nI: IntoFallibleIterator<Error = Self::Error>, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Determines if the elements of this iterator are lexicographically less\n than or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this iterator are lexicographically less","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":24852,"byte_end":24926,"line_start":868,"line_end":868,"column_start":5,"column_end":79}},{"value":"/ than or equal to those of another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":24931,"byte_end":24969,"line_start":869,"line_end":869,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":24974,"byte_end":24983,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":25906,"byte_end":25908,"line_start":897,"line_end":897,"column_start":8,"column_end":10},"name":"gt","qualname":"::FallibleIterator::gt","value":"fn gt<I>(Self, I) -> Result<bool, Self::Error> where Self: Sized,\nI: IntoFallibleIterator<Error = Self::Error>, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Determines if the elements of this iterator are lexicographically\n greater than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this iterator are lexicographically","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":25776,"byte_end":25845,"line_start":894,"line_end":894,"column_start":5,"column_end":74}},{"value":"/ greater than those of another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":25850,"byte_end":25884,"line_start":895,"line_end":895,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":25889,"byte_end":25898,"line_start":896,"line_end":896,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":26834,"byte_end":26836,"line_start":923,"line_end":923,"column_start":8,"column_end":10},"name":"ge","qualname":"::FallibleIterator::ge","value":"fn ge<I>(Self, I) -> Result<bool, Self::Error> where Self: Sized,\nI: IntoFallibleIterator<Error = Self::Error>, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Determines if the elements of this iterator are lexicographically\n greater than or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this iterator are lexicographically","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":26692,"byte_end":26761,"line_start":920,"line_end":920,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to those of another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":26766,"byte_end":26812,"line_start":921,"line_end":921,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":26817,"byte_end":26826,"line_start":922,"line_end":922,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":27713,"byte_end":27721,"line_start":948,"line_end":948,"column_start":8,"column_end":16},"name":"iterator","qualname":"::FallibleIterator::iterator","value":"fn iterator(Self) -> Iterator<Self> where Self: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns a normal (non-fallible) iterator over `Result<Item, Error>`.\n","sig":null,"attributes":[{"value":"/ Returns a normal (non-fallible) iterator over `Result<Item, Error>`.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":27619,"byte_end":27691,"line_start":946,"line_end":946,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":27696,"byte_end":27705,"line_start":947,"line_end":947,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":27938,"byte_end":27945,"line_start":958,"line_end":958,"column_start":8,"column_end":15},"name":"map_err","qualname":"::FallibleIterator::map_err","value":"fn map_err<B, F>(Self, F) -> MapErr<Self, F> where F: FnMut(Self::Error) -> B,\nSelf: Sized","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Returns an iterator which applies a transform to the errors of the\n underlying iterator.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which applies a transform to the errors of the","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":27817,"byte_end":27887,"line_start":955,"line_end":955,"column_start":5,"column_end":75}},{"value":"/ underlying iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":27892,"byte_end":27916,"line_start":956,"line_end":956,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":27921,"byte_end":27930,"line_start":957,"line_end":957,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28238,"byte_end":28242,"line_start":972,"line_end":972,"column_start":8,"column_end":12},"name":"next","qualname":"<&'_ mut I as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28221,"byte_end":28230,"line_start":971,"line_end":971,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28345,"byte_end":28354,"line_start":977,"line_end":977,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<&'_ mut I as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28328,"byte_end":28337,"line_start":976,"line_end":976,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28447,"byte_end":28450,"line_start":982,"line_end":982,"column_start":8,"column_end":11},"name":"nth","qualname":"<&'_ mut I as FallibleIterator>::nth","value":"fn nth(&mut Self, usize) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":68},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28430,"byte_end":28439,"line_start":981,"line_end":981,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28652,"byte_end":28661,"line_start":989,"line_end":989,"column_start":8,"column_end":17},"name":"next_back","qualname":"<&'_ mut I as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28635,"byte_end":28644,"line_start":988,"line_end":988,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28937,"byte_end":28941,"line_start":1000,"line_end":1000,"column_start":8,"column_end":12},"name":"next","qualname":"<Box<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28920,"byte_end":28929,"line_start":999,"line_end":999,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29044,"byte_end":29053,"line_start":1005,"line_end":1005,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Box<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29027,"byte_end":29036,"line_start":1004,"line_end":1004,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29146,"byte_end":29149,"line_start":1010,"line_end":1010,"column_start":8,"column_end":11},"name":"nth","qualname":"<Box<I> as FallibleIterator>::nth","value":"fn nth(&mut Self, usize) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":68},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29129,"byte_end":29138,"line_start":1009,"line_end":1009,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29399,"byte_end":29408,"line_start":1018,"line_end":1018,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Box<I> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29382,"byte_end":29391,"line_start":1017,"line_end":1017,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29570,"byte_end":29597,"line_start":1024,"line_end":1024,"column_start":11,"column_end":38},"name":"DoubleEndedFallibleIterator","qualname":"::DoubleEndedFallibleIterator","value":"DoubleEndedFallibleIterator: FallibleIterator","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":213}],"decl_id":null,"docs":" A fallible iterator able to yield elements from both ends.\n","sig":null,"attributes":[{"value":"/ A fallible iterator able to yield elements from both ends.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29497,"byte_end":29559,"line_start":1023,"line_end":1023,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29693,"byte_end":29702,"line_start":1026,"line_end":1026,"column_start":8,"column_end":17},"name":"next_back","qualname":"::DoubleEndedFallibleIterator::next_back","value":"fn next_back(&mut Self) -> Result<Option<Self::Item>, Self::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":null,"docs":" Advances the end of the iterator, returning the last value.\n","sig":null,"attributes":[{"value":"/ Advances the end of the iterator, returning the last value.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29622,"byte_end":29685,"line_start":1025,"line_end":1025,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29891,"byte_end":29896,"line_start":1030,"line_end":1030,"column_start":8,"column_end":13},"name":"rfold","qualname":"::DoubleEndedFallibleIterator::rfold","value":"fn rfold<B, F>(Self, B, F) -> Result<B, Self::Error> where Self: Sized,\nF: FnMut(B, Self::Item) -> Result<B, Self::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":null,"docs":" Applies a function over the elements of the iterator in reverse order, producing a single final value.\n","sig":null,"attributes":[{"value":"/ Applies a function over the elements of the iterator in reverse order, producing a single final value.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29763,"byte_end":29869,"line_start":1028,"line_end":1028,"column_start":5,"column_end":111}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29874,"byte_end":29883,"line_start":1029,"line_end":1029,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30308,"byte_end":30317,"line_start":1042,"line_end":1042,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"::DoubleEndedFallibleIterator::try_rfold","value":"fn try_rfold<B, E, F>(&mut Self, B, F) -> Result<B, E> where Self: Sized,\nE: From<Self::Error>, F: FnMut(B, Self::Item) -> Result<B, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":null,"docs":" Applies a function over the elements of the iterator in reverse, producing a single final value.","sig":null,"attributes":[{"value":"/ Applies a function over the elements of the iterator in reverse, producing a single final value.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30093,"byte_end":30193,"line_start":1038,"line_end":1038,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30198,"byte_end":30201,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ This is used as the \"base\" of many methods on `DoubleEndedFallibleIterator`.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30206,"byte_end":30286,"line_start":1040,"line_end":1040,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30291,"byte_end":30300,"line_start":1041,"line_end":1041,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30660,"byte_end":30680,"line_start":1056,"line_end":1056,"column_start":11,"column_end":31},"name":"FromFallibleIterator","qualname":"::FromFallibleIterator","value":"FromFallibleIterator<T>: Sized","parent":null,"children":[{"krate":0,"index":219}],"decl_id":null,"docs":" Conversion from a fallible iterator.\n","sig":null,"attributes":[{"value":"/ Conversion from a fallible iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30609,"byte_end":30649,"line_start":1055,"line_end":1055,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30750,"byte_end":30768,"line_start":1058,"line_end":1058,"column_start":8,"column_end":26},"name":"from_fallible_iter","qualname":"::FromFallibleIterator::from_fallible_iter","value":"fn from_fallible_iter<I>(I) -> Result<Self, I::Error> where\nI: IntoFallibleIterator<Item = T>","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":" Creates a value from a fallible iterator.\n","sig":null,"attributes":[{"value":"/ Creates a value from a fallible iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30697,"byte_end":30742,"line_start":1057,"line_end":1057,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30975,"byte_end":30993,"line_start":1066,"line_end":1066,"column_start":8,"column_end":26},"name":"from_fallible_iter","qualname":"<Vec<T> as FromFallibleIterator>::from_fallible_iter","value":"fn from_fallible_iter<I>(I) -> Result<Vec<T>, I::Error> where\nI: IntoFallibleIterator<Item = T>","parent":{"krate":0,"index":217},"children":[],"decl_id":{"krate":0,"index":219},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30958,"byte_end":30967,"line_start":1065,"line_end":1065,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":31415,"byte_end":31433,"line_start":1084,"line_end":1084,"column_start":8,"column_end":26},"name":"from_fallible_iter","qualname":"<HashSet<T, S> as FromFallibleIterator>::from_fallible_iter","value":"fn from_fallible_iter<I>(I) -> Result<HashSet<T, S>, I::Error> where\nI: IntoFallibleIterator<Item = T>","parent":{"krate":0,"index":217},"children":[],"decl_id":{"krate":0,"index":219},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":31398,"byte_end":31407,"line_start":1083,"line_end":1083,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":31936,"byte_end":31954,"line_start":1106,"line_end":1106,"column_start":8,"column_end":26},"name":"from_fallible_iter","qualname":"<HashMap<K, V, S> as FromFallibleIterator>::from_fallible_iter","value":"fn from_fallible_iter<I>(I) -> Result<HashMap<K, V, S>, I::Error> where\nI: IntoFallibleIterator<Item = (K, V)>","parent":{"krate":0,"index":217},"children":[],"decl_id":{"krate":0,"index":219},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":31919,"byte_end":31928,"line_start":1105,"line_end":1105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":32445,"byte_end":32463,"line_start":1127,"line_end":1127,"column_start":8,"column_end":26},"name":"from_fallible_iter","qualname":"<BTreeSet<T> as FromFallibleIterator>::from_fallible_iter","value":"fn from_fallible_iter<I>(I) -> Result<BTreeSet<T>, I::Error> where\nI: IntoFallibleIterator<Item = T>","parent":{"krate":0,"index":217},"children":[],"decl_id":{"krate":0,"index":219},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":32428,"byte_end":32437,"line_start":1126,"line_end":1126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":32905,"byte_end":32923,"line_start":1147,"line_end":1147,"column_start":8,"column_end":26},"name":"from_fallible_iter","qualname":"<BTreeMap<K, V> as FromFallibleIterator>::from_fallible_iter","value":"fn from_fallible_iter<I>(I) -> Result<BTreeMap<K, V>, I::Error> where\nI: IntoFallibleIterator<Item = (K, V)>","parent":{"krate":0,"index":217},"children":[],"decl_id":{"krate":0,"index":219},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":32888,"byte_end":32897,"line_start":1146,"line_end":1146,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33285,"byte_end":33305,"line_start":1162,"line_end":1162,"column_start":11,"column_end":31},"name":"IntoFallibleIterator","qualname":"::IntoFallibleIterator","value":"IntoFallibleIterator","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"decl_id":null,"docs":" Conversion into a `FallibleIterator`.\n","sig":null,"attributes":[{"value":"/ Conversion into a `FallibleIterator`.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33233,"byte_end":33274,"line_start":1161,"line_end":1161,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33355,"byte_end":33359,"line_start":1164,"line_end":1164,"column_start":10,"column_end":14},"name":"Item","qualname":"::IntoFallibleIterator::Item","value":"type Item;","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" The elements of the iterator.\n","sig":null,"attributes":[{"value":"/ The elements of the iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33312,"byte_end":33345,"line_start":1163,"line_end":1163,"column_start":5,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33412,"byte_end":33417,"line_start":1167,"line_end":1167,"column_start":10,"column_end":15},"name":"Error","qualname":"::IntoFallibleIterator::Error","value":"type Error;","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" The error value of the iterator.\n","sig":null,"attributes":[{"value":"/ The error value of the iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33366,"byte_end":33402,"line_start":1166,"line_end":1166,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33451,"byte_end":33467,"line_start":1170,"line_end":1170,"column_start":10,"column_end":26},"name":"IntoFallibleIter","qualname":"::IntoFallibleIterator::IntoFallibleIter","value":"type IntoFallibleIter: FallibleIterator<Item = Self::Item, Error = Self::Error>;","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" The iterator.\n","sig":null,"attributes":[{"value":"/ The iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33424,"byte_end":33441,"line_start":1169,"line_end":1169,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33585,"byte_end":33603,"line_start":1173,"line_end":1173,"column_start":8,"column_end":26},"name":"into_fallible_iter","qualname":"::IntoFallibleIterator::into_fallible_iter","value":"fn into_fallible_iter(Self) -> Self::IntoFallibleIter","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" Creates a fallible iterator from a value.\n","sig":null,"attributes":[{"value":"/ Creates a fallible iterator from a value.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33532,"byte_end":33577,"line_start":1172,"line_end":1172,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33813,"byte_end":33831,"line_start":1185,"line_end":1185,"column_start":8,"column_end":26},"name":"into_fallible_iter","qualname":"<I as IntoFallibleIterator>::into_fallible_iter","value":"fn into_fallible_iter(Self) -> I","parent":{"krate":0,"index":250},"children":[],"decl_id":{"krate":0,"index":254},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33796,"byte_end":33805,"line_start":1184,"line_end":1184,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34001,"byte_end":34004,"line_start":1193,"line_end":1193,"column_start":12,"column_end":15},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634}],"decl_id":null,"docs":" An iterator which applies a fallible transform to the elements of the\n underlying iterator.\n","sig":null,"attributes":[{"value":"/ An iterator which applies a fallible transform to the elements of the","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33867,"byte_end":33940,"line_start":1190,"line_end":1190,"column_start":1,"column_end":74}},{"value":"/ underlying iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33941,"byte_end":33965,"line_start":1191,"line_end":1191,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34229,"byte_end":34233,"line_start":1207,"line_end":1207,"column_start":8,"column_end":12},"name":"next","qualname":"<Map<T, F> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<B>, T::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34212,"byte_end":34221,"line_start":1206,"line_end":1206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34462,"byte_end":34471,"line_start":1216,"line_end":1216,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Map<T, F> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34445,"byte_end":34454,"line_start":1215,"line_end":1215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34563,"byte_end":34571,"line_start":1221,"line_end":1221,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Map<T, F> as FallibleIterator>::try_fold","value":"fn try_fold<C, E, G>(&mut Self, C, G) -> Result<C, E> where E: From<T::Error>,\nG: FnMut(C, B) -> Result<C, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34546,"byte_end":34555,"line_start":1220,"line_end":1220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34970,"byte_end":34979,"line_start":1237,"line_end":1237,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Map<I, F> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<B>, I::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34953,"byte_end":34962,"line_start":1236,"line_end":1236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":35213,"byte_end":35222,"line_start":1246,"line_end":1246,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"<Map<I, F> as DoubleEndedFallibleIterator>::try_rfold","value":"fn try_rfold<C, E, G>(&mut Self, C, G) -> Result<C, E> where\nE: From<I::Error>, G: FnMut(C, B) -> Result<C, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":213},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":35196,"byte_end":35205,"line_start":1245,"line_end":1245,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":35649,"byte_end":35654,"line_start":1265,"line_end":1265,"column_start":12,"column_end":17},"name":"Chain","qualname":"::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659}],"decl_id":null,"docs":" An iterator which yields the elements of one iterator followed by another.\n","sig":null,"attributes":[{"value":"/ An iterator which yields the elements of one iterator followed by another.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":35535,"byte_end":35613,"line_start":1263,"line_end":1263,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":35926,"byte_end":35930,"line_start":1280,"line_end":1280,"column_start":8,"column_end":12},"name":"next","qualname":"<Chain<T, U> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<T::Item>, T::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":35909,"byte_end":35918,"line_start":1279,"line_end":1279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":36394,"byte_end":36403,"line_start":1295,"line_end":1295,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Chain<T, U> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":36377,"byte_end":36386,"line_start":1294,"line_end":1294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":36786,"byte_end":36791,"line_start":1309,"line_end":1309,"column_start":8,"column_end":13},"name":"count","qualname":"<Chain<T, U> as FallibleIterator>::count","value":"fn count(Self) -> Result<usize, T::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":64},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":36769,"byte_end":36778,"line_start":1308,"line_end":1308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":37074,"byte_end":37082,"line_start":1318,"line_end":1318,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Chain<T, U> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, F>(&mut Self, B, F) -> Result<B, E> where E: From<T::Error>,\nF: FnMut(B, T::Item) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":37057,"byte_end":37066,"line_start":1317,"line_end":1317,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":37618,"byte_end":37622,"line_start":1335,"line_end":1335,"column_start":8,"column_end":12},"name":"find","qualname":"<Chain<T, U> as FallibleIterator>::find","value":"fn find<F>(&mut Self, F) -> Result<Option<T::Item>, T::Error> where\nF: FnMut(&T::Item) -> Result<bool, T::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":126},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":37601,"byte_end":37610,"line_start":1334,"line_end":1334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":38176,"byte_end":38180,"line_start":1353,"line_end":1353,"column_start":8,"column_end":12},"name":"last","qualname":"<Chain<T, U> as FallibleIterator>::last","value":"fn last(Self) -> Result<Option<T::Item>, T::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":66},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":38159,"byte_end":38168,"line_start":1352,"line_end":1352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":38681,"byte_end":38690,"line_start":1371,"line_end":1371,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Chain<T, U> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<T::Item>, T::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":38664,"byte_end":38673,"line_start":1370,"line_end":1370,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":39175,"byte_end":39184,"line_start":1386,"line_end":1386,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"<Chain<T, U> as DoubleEndedFallibleIterator>::try_rfold","value":"fn try_rfold<B, E, F>(&mut Self, B, F) -> Result<B, E> where\nE: From<T::Error>, F: FnMut(B, T::Item) -> Result<B, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":213},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":39158,"byte_end":39167,"line_start":1385,"line_end":1385,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":39811,"byte_end":39817,"line_start":1405,"line_end":1405,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::Cloned","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator which clones the elements of the underlying iterator.\n","sig":null,"attributes":[{"value":"/ An iterator which clones the elements of the underlying iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":39706,"byte_end":39775,"line_start":1403,"line_end":1403,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40006,"byte_end":40010,"line_start":1416,"line_end":1416,"column_start":8,"column_end":12},"name":"next","qualname":"<Cloned<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<T>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":39989,"byte_end":39998,"line_start":1415,"line_end":1415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40125,"byte_end":40134,"line_start":1421,"line_end":1421,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Cloned<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40108,"byte_end":40117,"line_start":1420,"line_end":1420,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40225,"byte_end":40233,"line_start":1426,"line_end":1426,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Cloned<I> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, F>(&mut Self, B, F) -> Result<B, E> where E: From<I::Error>,\nF: FnMut(B, T) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40208,"byte_end":40217,"line_start":1425,"line_end":1425,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40594,"byte_end":40603,"line_start":1441,"line_end":1441,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Cloned<I> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<T>, I::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40577,"byte_end":40586,"line_start":1440,"line_end":1440,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40723,"byte_end":40732,"line_start":1446,"line_end":1446,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"<Cloned<I> as DoubleEndedFallibleIterator>::try_rfold","value":"fn try_rfold<B, E, F>(&mut Self, B, F) -> Result<B, E> where\nE: From<I::Error>, F: FnMut(B, T) -> Result<B, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":213},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40706,"byte_end":40715,"line_start":1445,"line_end":1445,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41052,"byte_end":41059,"line_start":1457,"line_end":1457,"column_start":8,"column_end":15},"name":"convert","qualname":"::convert","value":"fn convert<T, E, I>(I) -> Convert<I> where I: iter::Iterator<Item =\nResult<T, E>>","parent":null,"children":[],"decl_id":null,"docs":" Converts an `Iterator<Item = Result<T, E>>` into a `FallibleIterator<Item = T, Error = E>`.\n","sig":null,"attributes":[{"value":"/ Converts an `Iterator<Item = Result<T, E>>` into a `FallibleIterator<Item = T, Error = E>`.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40939,"byte_end":41034,"line_start":1455,"line_end":1455,"column_start":1,"column_end":96}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41035,"byte_end":41044,"line_start":1456,"line_end":1456,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41265,"byte_end":41272,"line_start":1466,"line_end":1466,"column_start":12,"column_end":19},"name":"Convert","qualname":"::Convert","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fallible iterator that wraps a normal iterator over `Result`s.\n","sig":null,"attributes":[{"value":"/ A fallible iterator that wraps a normal iterator over `Result`s.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41161,"byte_end":41229,"line_start":1464,"line_end":1464,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41440,"byte_end":41444,"line_start":1476,"line_end":1476,"column_start":8,"column_end":12},"name":"next","qualname":"<Convert<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<T>, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41423,"byte_end":41432,"line_start":1475,"line_end":1475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41656,"byte_end":41665,"line_start":1485,"line_end":1485,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Convert<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41639,"byte_end":41648,"line_start":1484,"line_end":1484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41756,"byte_end":41764,"line_start":1490,"line_end":1490,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Convert<I> as FallibleIterator>::try_fold","value":"fn try_fold<B, E2, F>(&mut Self, B, F) -> Result<B, E2> where E2: From<E>,\nF: FnMut(B, T) -> Result<B, E2>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41739,"byte_end":41748,"line_start":1489,"line_end":1489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42095,"byte_end":42104,"line_start":1504,"line_end":1504,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Convert<I> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<T>, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42078,"byte_end":42087,"line_start":1503,"line_end":1503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42321,"byte_end":42330,"line_start":1513,"line_end":1513,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"<Convert<I> as DoubleEndedFallibleIterator>::try_rfold","value":"fn try_rfold<B, E2, F>(&mut Self, B, F) -> Result<B, E2> where E2: From<E>,\nF: FnMut(B, T) -> Result<B, E2>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":213},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42304,"byte_end":42313,"line_start":1512,"line_end":1512,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42664,"byte_end":42673,"line_start":1525,"line_end":1525,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691}],"decl_id":null,"docs":" An iterator that yields the iteration count as well as the values of the\n underlying iterator.\n","sig":null,"attributes":[{"value":"/ An iterator that yields the iteration count as well as the values of the","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42527,"byte_end":42603,"line_start":1522,"line_end":1522,"column_start":1,"column_end":77}},{"value":"/ underlying iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42604,"byte_end":42628,"line_start":1523,"line_end":1523,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42865,"byte_end":42869,"line_start":1538,"line_end":1538,"column_start":8,"column_end":12},"name":"next","qualname":"<Enumerate<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<(usize, I::Item)>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42848,"byte_end":42857,"line_start":1537,"line_end":1537,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":43124,"byte_end":43133,"line_start":1549,"line_end":1549,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Enumerate<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":43107,"byte_end":43116,"line_start":1548,"line_end":1548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":43225,"byte_end":43230,"line_start":1554,"line_end":1554,"column_start":8,"column_end":13},"name":"count","qualname":"<Enumerate<I> as FallibleIterator>::count","value":"fn count(Self) -> Result<usize, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":64},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":43208,"byte_end":43217,"line_start":1553,"line_end":1553,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":43318,"byte_end":43321,"line_start":1559,"line_end":1559,"column_start":8,"column_end":11},"name":"nth","qualname":"<Enumerate<I> as FallibleIterator>::nth","value":"fn nth(&mut Self, usize) -> Result<Option<(usize, I::Item)>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":68},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":43301,"byte_end":43310,"line_start":1558,"line_end":1558,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":43631,"byte_end":43639,"line_start":1571,"line_end":1571,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Enumerate<I> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, F>(&mut Self, B, F) -> Result<B, E> where E: From<I::Error>,\nF: FnMut(B, (usize, I::Item)) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":43614,"byte_end":43623,"line_start":1570,"line_end":1570,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44115,"byte_end":44121,"line_start":1588,"line_end":1588,"column_start":12,"column_end":18},"name":"Filter","qualname":"::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702}],"decl_id":null,"docs":" An iterator which uses a fallible predicate to determine which values of the\n underlying iterator should be yielded.\n","sig":null,"attributes":[{"value":"/ An iterator which uses a fallible predicate to determine which values of the","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":43956,"byte_end":44036,"line_start":1585,"line_end":1585,"column_start":1,"column_end":81}},{"value":"/ underlying iterator should be yielded.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44037,"byte_end":44079,"line_start":1586,"line_end":1586,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44356,"byte_end":44360,"line_start":1602,"line_end":1602,"column_start":8,"column_end":12},"name":"next","qualname":"<Filter<I, F> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44339,"byte_end":44348,"line_start":1601,"line_end":1601,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44727,"byte_end":44736,"line_start":1616,"line_end":1616,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Filter<I, F> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44710,"byte_end":44719,"line_start":1615,"line_end":1615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44835,"byte_end":44843,"line_start":1621,"line_end":1621,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Filter<I, F> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, G>(&mut Self, B, G) -> Result<B, E> where E: From<I::Error>,\nG: FnMut(B, I::Item) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44818,"byte_end":44827,"line_start":1620,"line_end":1620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":45434,"byte_end":45443,"line_start":1646,"line_end":1646,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Filter<I, F> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":45417,"byte_end":45426,"line_start":1645,"line_end":1645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":45811,"byte_end":45820,"line_start":1660,"line_end":1660,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"<Filter<I, F> as DoubleEndedFallibleIterator>::try_rfold","value":"fn try_rfold<B, E, G>(&mut Self, B, G) -> Result<B, E> where\nE: From<I::Error>, G: FnMut(B, I::Item) -> Result<B, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":213},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":45794,"byte_end":45803,"line_start":1659,"line_end":1659,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":46363,"byte_end":46372,"line_start":1682,"line_end":1682,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715}],"decl_id":null,"docs":" An iterator which both filters and maps the values of the underlying\n iterator.\n","sig":null,"attributes":[{"value":"/ An iterator which both filters and maps the values of the underlying","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":46241,"byte_end":46313,"line_start":1679,"line_end":1679,"column_start":1,"column_end":73}},{"value":"/ iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":46314,"byte_end":46327,"line_start":1680,"line_end":1680,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":46611,"byte_end":46615,"line_start":1696,"line_end":1696,"column_start":8,"column_end":12},"name":"next","qualname":"<FilterMap<I, F> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<B>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":46594,"byte_end":46603,"line_start":1695,"line_end":1695,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":46945,"byte_end":46954,"line_start":1708,"line_end":1708,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<FilterMap<I, F> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":46928,"byte_end":46937,"line_start":1707,"line_end":1707,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":47053,"byte_end":47061,"line_start":1713,"line_end":1713,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<FilterMap<I, F> as FallibleIterator>::try_fold","value":"fn try_fold<C, E, G>(&mut Self, C, G) -> Result<C, E> where E: From<I::Error>,\nG: FnMut(C, B) -> Result<C, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":47036,"byte_end":47045,"line_start":1712,"line_end":1712,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":47551,"byte_end":47560,"line_start":1732,"line_end":1732,"column_start":8,"column_end":17},"name":"next_back","qualname":"<FilterMap<I, F> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<B>, I::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":47534,"byte_end":47543,"line_start":1731,"line_end":1731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":47891,"byte_end":47900,"line_start":1744,"line_end":1744,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"<FilterMap<I, F> as DoubleEndedFallibleIterator>::try_rfold","value":"fn try_rfold<C, E, G>(&mut Self, C, G) -> Result<C, E> where\nE: From<I::Error>, G: FnMut(C, B) -> Result<C, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":213},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":47874,"byte_end":47883,"line_start":1743,"line_end":1743,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":48342,"byte_end":48349,"line_start":1759,"line_end":1759,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729}],"decl_id":null,"docs":" An iterator which maps each element to another iterator, yielding those iterator's elements.\n","sig":null,"attributes":[{"value":"/ An iterator which maps each element to another iterator, yielding those iterator's elements.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":48210,"byte_end":48306,"line_start":1757,"line_end":1757,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":48708,"byte_end":48712,"line_start":1777,"line_end":1777,"column_start":8,"column_end":12},"name":"next","qualname":"<FlatMap<I, U, F> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<U::Item>, U::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":48691,"byte_end":48700,"line_start":1776,"line_end":1776,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":49141,"byte_end":49149,"line_start":1792,"line_end":1792,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<FlatMap<I, U, F> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, G>(&mut Self, B, G) -> Result<B, E> where E: From<U::Error>,\nG: FnMut(B, U::Item) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":49124,"byte_end":49133,"line_start":1791,"line_end":1791,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":49903,"byte_end":49910,"line_start":1818,"line_end":1818,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441}],"decl_id":null,"docs":" An iterator which flattens an iterator of iterators, yielding those iterators' elements.\n","sig":null,"attributes":[{"value":"/ An iterator which flattens an iterator of iterators, yielding those iterators' elements.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":49799,"byte_end":49891,"line_start":1817,"line_end":1817,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":50256,"byte_end":50261,"line_start":1834,"line_end":1834,"column_start":8,"column_end":13},"name":"clone","qualname":"<Flatten<I> as core::clone::Clone>::clone","value":"fn clone(&Self) -> Flatten<I>","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":50239,"byte_end":50248,"line_start":1833,"line_end":1833,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":50654,"byte_end":50658,"line_start":1851,"line_end":1851,"column_start":8,"column_end":12},"name":"next","qualname":"<Flatten<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<Self::Item>, Self::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":50637,"byte_end":50646,"line_start":1850,"line_end":1850,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":51093,"byte_end":51101,"line_start":1866,"line_end":1866,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Flatten<I> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, G>(&mut Self, B, G) -> Result<B, E> where\nE: From<Self::Error>, G: FnMut(B, Self::Item) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":51076,"byte_end":51085,"line_start":1865,"line_end":1865,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":51897,"byte_end":51901,"line_start":1894,"line_end":1894,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743}],"decl_id":null,"docs":" An iterator that yields `Ok(None)` forever after the underlying iterator\n yields `Ok(None)` once.\n","sig":null,"attributes":[{"value":"/ An iterator that yields `Ok(None)` forever after the underlying iterator","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":51757,"byte_end":51833,"line_start":1891,"line_end":1891,"column_start":1,"column_end":77}},{"value":"/ yields `Ok(None)` once.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":51834,"byte_end":51861,"line_start":1892,"line_end":1892,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52081,"byte_end":52085,"line_start":1907,"line_end":1907,"column_start":8,"column_end":12},"name":"next","qualname":"<Fuse<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52064,"byte_end":52073,"line_start":1906,"line_end":1906,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52400,"byte_end":52409,"line_start":1922,"line_end":1922,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Fuse<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52383,"byte_end":52392,"line_start":1921,"line_end":1921,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52580,"byte_end":52585,"line_start":1931,"line_end":1931,"column_start":8,"column_end":13},"name":"count","qualname":"<Fuse<I> as FallibleIterator>::count","value":"fn count(Self) -> Result<usize, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":64},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52563,"byte_end":52572,"line_start":1930,"line_end":1930,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52745,"byte_end":52749,"line_start":1940,"line_end":1940,"column_start":8,"column_end":12},"name":"last","qualname":"<Fuse<I> as FallibleIterator>::last","value":"fn last(Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":66},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52728,"byte_end":52737,"line_start":1939,"line_end":1939,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52921,"byte_end":52924,"line_start":1949,"line_end":1949,"column_start":8,"column_end":11},"name":"nth","qualname":"<Fuse<I> as FallibleIterator>::nth","value":"fn nth(&mut Self, usize) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":68},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":52904,"byte_end":52913,"line_start":1948,"line_end":1948,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":53216,"byte_end":53224,"line_start":1962,"line_end":1962,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Fuse<I> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, F>(&mut Self, B, F) -> Result<B, E> where E: From<I::Error>,\nF: FnMut(B, I::Item) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":53199,"byte_end":53208,"line_start":1961,"line_end":1961,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":53594,"byte_end":53601,"line_start":1977,"line_end":1977,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754}],"decl_id":null,"docs":" An iterator which passes each element to a closure before returning it.\n","sig":null,"attributes":[{"value":"/ An iterator which passes each element to a closure before returning it.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":53483,"byte_end":53558,"line_start":1975,"line_end":1975,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":53835,"byte_end":53839,"line_start":1991,"line_end":1991,"column_start":8,"column_end":12},"name":"next","qualname":"<Inspect<I, F> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":53818,"byte_end":53827,"line_start":1990,"line_end":1990,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54088,"byte_end":54097,"line_start":2002,"line_end":2002,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Inspect<I, F> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54071,"byte_end":54080,"line_start":2001,"line_end":2001,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54189,"byte_end":54197,"line_start":2007,"line_end":2007,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Inspect<I, F> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, G>(&mut Self, B, G) -> Result<B, E> where E: From<I::Error>,\nG: FnMut(B, I::Item) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54172,"byte_end":54181,"line_start":2006,"line_end":2006,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54657,"byte_end":54666,"line_start":2026,"line_end":2026,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Inspect<I, F> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54640,"byte_end":54649,"line_start":2025,"line_end":2025,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54920,"byte_end":54929,"line_start":2037,"line_end":2037,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"<Inspect<I, F> as DoubleEndedFallibleIterator>::try_rfold","value":"fn try_rfold<B, E, G>(&mut Self, B, G) -> Result<B, E> where\nE: From<I::Error>, G: FnMut(B, I::Item) -> Result<B, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":213},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54903,"byte_end":54912,"line_start":2036,"line_end":2036,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":763},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55325,"byte_end":55333,"line_start":2052,"line_end":2052,"column_start":12,"column_end":20},"name":"Iterator","qualname":"::Iterator","value":"","parent":null,"children":[],"decl_id":null,"docs":" A normal (non-fallible) iterator which wraps a fallible iterator.\n","sig":null,"attributes":[{"value":"/ A normal (non-fallible) iterator which wraps a fallible iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55220,"byte_end":55289,"line_start":2050,"line_end":2050,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55479,"byte_end":55483,"line_start":2061,"line_end":2061,"column_start":8,"column_end":12},"name":"next","qualname":"<Iterator<I> as core::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Result<I::Item, I::Error>>","parent":{"krate":1,"index":8193},"children":[],"decl_id":{"krate":1,"index":8195},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55462,"byte_end":55471,"line_start":2060,"line_end":2060,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55708,"byte_end":55717,"line_start":2070,"line_end":2070,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Iterator<I> as core::iter::Iterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":1,"index":8193},"children":[],"decl_id":{"krate":1,"index":8196},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55691,"byte_end":55700,"line_start":2069,"line_end":2069,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55898,"byte_end":55907,"line_start":2080,"line_end":2080,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Iterator<I> as core::iter::DoubleEndedIterator>::next_back","value":"fn next_back(&mut Self) -> Option<Result<I::Item, I::Error>>","parent":{"krate":1,"index":8042},"children":[],"decl_id":{"krate":1,"index":8043},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55881,"byte_end":55890,"line_start":2079,"line_end":2079,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56241,"byte_end":56247,"line_start":2092,"line_end":2092,"column_start":12,"column_end":18},"name":"MapErr","qualname":"::MapErr","value":"MapErr {  }","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":777}],"decl_id":null,"docs":" An iterator which applies a transform to the errors of the underlying\n iterator.\n","sig":null,"attributes":[{"value":"/ An iterator which applies a transform to the errors of the underlying","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56118,"byte_end":56191,"line_start":2089,"line_end":2089,"column_start":1,"column_end":74}},{"value":"/ iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56192,"byte_end":56205,"line_start":2090,"line_end":2090,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56457,"byte_end":56461,"line_start":2106,"line_end":2106,"column_start":8,"column_end":12},"name":"next","qualname":"<MapErr<I, F> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, B>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56440,"byte_end":56449,"line_start":2105,"line_end":2105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56577,"byte_end":56586,"line_start":2111,"line_end":2111,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<MapErr<I, F> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56560,"byte_end":56569,"line_start":2110,"line_end":2110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56678,"byte_end":56683,"line_start":2116,"line_end":2116,"column_start":8,"column_end":13},"name":"count","qualname":"<MapErr<I, F> as FallibleIterator>::count","value":"fn count(Self) -> Result<usize, B>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":64},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56661,"byte_end":56670,"line_start":2115,"line_end":2115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56789,"byte_end":56793,"line_start":2121,"line_end":2121,"column_start":8,"column_end":12},"name":"last","qualname":"<MapErr<I, F> as FallibleIterator>::last","value":"fn last(Self) -> Result<Option<I::Item>, B>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":66},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56772,"byte_end":56781,"line_start":2120,"line_end":2120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56908,"byte_end":56911,"line_start":2126,"line_end":2126,"column_start":8,"column_end":11},"name":"nth","qualname":"<MapErr<I, F> as FallibleIterator>::nth","value":"fn nth(&mut Self, usize) -> Result<Option<I::Item>, B>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":68},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56891,"byte_end":56900,"line_start":2125,"line_end":2125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":57037,"byte_end":57045,"line_start":2131,"line_end":2131,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<MapErr<I, F> as FallibleIterator>::try_fold","value":"fn try_fold<C, E, G>(&mut Self, C, G) -> Result<C, E> where E: From<B>,\nG: FnMut(C, I::Item) -> Result<C, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":57020,"byte_end":57029,"line_start":2130,"line_end":2130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":57581,"byte_end":57590,"line_start":2151,"line_end":2151,"column_start":8,"column_end":17},"name":"next_back","qualname":"<MapErr<I, F> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<I::Item>, B>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":57564,"byte_end":57573,"line_start":2150,"line_end":2150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":57711,"byte_end":57720,"line_start":2156,"line_end":2156,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"<MapErr<I, F> as DoubleEndedFallibleIterator>::try_rfold","value":"fn try_rfold<C, E, G>(&mut Self, C, G) -> Result<C, E> where E: From<B>,\nG: FnMut(C, I::Item) -> Result<C, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":213},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":57694,"byte_end":57703,"line_start":2155,"line_end":2155,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58390,"byte_end":58398,"line_start":2184,"line_end":2184,"column_start":12,"column_end":20},"name":"Peekable","qualname":"::Peekable","value":"Peekable {  }","parent":null,"children":[{"krate":0,"index":788},{"krate":0,"index":789}],"decl_id":null,"docs":" An iterator which can look at the next element without consuming it.\n","sig":null,"attributes":[{"value":"/ An iterator which can look at the next element without consuming it.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58282,"byte_end":58354,"line_start":2182,"line_end":2182,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58619,"byte_end":58623,"line_start":2195,"line_end":2195,"column_start":12,"column_end":16},"name":"peek","qualname":"<Peekable<I>>::peek","value":"fn peek(&mut Self) -> Result<Option<&I::Item>, I::Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the next value without advancing the iterator.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the next value without advancing the iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58520,"byte_end":58593,"line_start":2193,"line_end":2193,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58598,"byte_end":58607,"line_start":2194,"line_end":2194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58948,"byte_end":58952,"line_start":2212,"line_end":2212,"column_start":8,"column_end":12},"name":"next","qualname":"<Peekable<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58931,"byte_end":58940,"line_start":2211,"line_end":2211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":59147,"byte_end":59156,"line_start":2221,"line_end":2221,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Peekable<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":59130,"byte_end":59139,"line_start":2220,"line_end":2220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":59427,"byte_end":59435,"line_start":2231,"line_end":2231,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Peekable<I> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, F>(&mut Self, B, F) -> Result<B, E> where E: From<I::Error>,\nF: FnMut(B, I::Item) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":59410,"byte_end":59419,"line_start":2230,"line_end":2230,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":796},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":59856,"byte_end":59859,"line_start":2247,"line_end":2247,"column_start":12,"column_end":15},"name":"Rev","qualname":"::Rev","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator which yields elements of the underlying iterator in reverse\n order.\n","sig":null,"attributes":[{"value":"/ An iterator which yields elements of the underlying iterator in reverse","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":59734,"byte_end":59809,"line_start":2244,"line_end":2244,"column_start":1,"column_end":76}},{"value":"/ order.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":59810,"byte_end":59820,"line_start":2245,"line_end":2245,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60022,"byte_end":60026,"line_start":2257,"line_end":2257,"column_start":8,"column_end":12},"name":"next","qualname":"<Rev<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60005,"byte_end":60014,"line_start":2256,"line_end":2256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60132,"byte_end":60141,"line_start":2262,"line_end":2262,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Rev<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60115,"byte_end":60124,"line_start":2261,"line_end":2261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60232,"byte_end":60237,"line_start":2267,"line_end":2267,"column_start":8,"column_end":13},"name":"count","qualname":"<Rev<I> as FallibleIterator>::count","value":"fn count(Self) -> Result<usize, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":64},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60215,"byte_end":60224,"line_start":2266,"line_end":2266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60324,"byte_end":60332,"line_start":2272,"line_end":2272,"column_start":8,"column_end":16},"name":"try_fold","qualname":"<Rev<I> as FallibleIterator>::try_fold","value":"fn try_fold<B, E, F>(&mut Self, B, F) -> Result<B, E> where E: From<I::Error>,\nF: FnMut(B, I::Item) -> Result<B, E>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":114},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60307,"byte_end":60316,"line_start":2271,"line_end":2271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60628,"byte_end":60637,"line_start":2286,"line_end":2286,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Rev<I> as DoubleEndedFallibleIterator>::next_back","value":"fn next_back(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":209},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60611,"byte_end":60620,"line_start":2285,"line_end":2285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60738,"byte_end":60747,"line_start":2291,"line_end":2291,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"<Rev<I> as DoubleEndedFallibleIterator>::try_rfold","value":"fn try_rfold<B, E, F>(&mut Self, B, F) -> Result<B, E> where\nE: From<I::Error>, F: FnMut(B, I::Item) -> Result<B, E>","parent":{"krate":0,"index":208},"children":[],"decl_id":{"krate":0,"index":213},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60721,"byte_end":60730,"line_start":2290,"line_end":2290,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":806},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61015,"byte_end":61019,"line_start":2302,"line_end":2302,"column_start":12,"column_end":16},"name":"Scan","qualname":"::Scan","value":"Scan {  }","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812}],"decl_id":null,"docs":" An iterator which applies a stateful closure.\n","sig":null,"attributes":[{"value":"/ An iterator which applies a stateful closure.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60930,"byte_end":60979,"line_start":2300,"line_end":2300,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61289,"byte_end":61293,"line_start":2317,"line_end":2317,"column_start":8,"column_end":12},"name":"next","qualname":"<Scan<I, St, F> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<B>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61272,"byte_end":61281,"line_start":2316,"line_end":2316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61491,"byte_end":61500,"line_start":2325,"line_end":2325,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Scan<I, St, F> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61474,"byte_end":61483,"line_start":2324,"line_end":2324,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61686,"byte_end":61690,"line_start":2333,"line_end":2333,"column_start":12,"column_end":16},"name":"Skip","qualname":"::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826}],"decl_id":null,"docs":" An iterator which skips initial elements.\n","sig":null,"attributes":[{"value":"/ An iterator which skips initial elements.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61605,"byte_end":61650,"line_start":2331,"line_end":2331,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61868,"byte_end":61872,"line_start":2346,"line_end":2346,"column_start":8,"column_end":12},"name":"next","qualname":"<Skip<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61851,"byte_end":61860,"line_start":2345,"line_end":2345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":62109,"byte_end":62118,"line_start":2357,"line_end":2357,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Skip<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":62092,"byte_end":62101,"line_start":2356,"line_end":2356,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":833},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":62423,"byte_end":62432,"line_start":2369,"line_end":2369,"column_start":12,"column_end":21},"name":"SkipWhile","qualname":"::SkipWhile","value":"SkipWhile {  }","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838}],"decl_id":null,"docs":" An iterator which skips initial elements based on a predicate.\n","sig":null,"attributes":[{"value":"/ An iterator which skips initial elements based on a predicate.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":62321,"byte_end":62387,"line_start":2367,"line_end":2367,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":62694,"byte_end":62698,"line_start":2384,"line_end":2384,"column_start":8,"column_end":12},"name":"next","qualname":"<SkipWhile<I, P> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":62677,"byte_end":62686,"line_start":2383,"line_end":2383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":63047,"byte_end":63056,"line_start":2398,"line_end":2398,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<SkipWhile<I, P> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":63030,"byte_end":63039,"line_start":2397,"line_end":2397,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":63364,"byte_end":63370,"line_start":2410,"line_end":2410,"column_start":12,"column_end":18},"name":"StepBy","qualname":"::StepBy","value":"StepBy {  }","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851}],"decl_id":null,"docs":" An iterator which steps through the elements of the underlying iterator by a certain amount.\n","sig":null,"attributes":[{"value":"/ An iterator which steps through the elements of the underlying iterator by a certain amount.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":63232,"byte_end":63328,"line_start":2408,"line_end":2408,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":63575,"byte_end":63579,"line_start":2424,"line_end":2424,"column_start":8,"column_end":12},"name":"next","qualname":"<StepBy<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":63558,"byte_end":63567,"line_start":2423,"line_end":2423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":63799,"byte_end":63808,"line_start":2433,"line_end":2433,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<StepBy<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":858},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":64414,"byte_end":64418,"line_start":2455,"line_end":2455,"column_start":12,"column_end":16},"name":"Take","qualname":"::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"decl_id":null,"docs":" An iterator which yields a limited number of elements from the underlying\n iterator.\n","sig":null,"attributes":[{"value":"/ An iterator which yields a limited number of elements from the underlying","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":64287,"byte_end":64364,"line_start":2452,"line_end":2452,"column_start":1,"column_end":78}},{"value":"/ iterator.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":64365,"byte_end":64378,"line_start":2453,"line_end":2453,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":64604,"byte_end":64608,"line_start":2468,"line_end":2468,"column_start":8,"column_end":12},"name":"next","qualname":"<Take<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":64587,"byte_end":64596,"line_start":2467,"line_end":2467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":64887,"byte_end":64896,"line_start":2481,"line_end":2481,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Take<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":64870,"byte_end":64879,"line_start":2480,"line_end":2480,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":868},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":65199,"byte_end":65208,"line_start":2492,"line_end":2492,"column_start":12,"column_end":21},"name":"TakeWhile","qualname":"::TakeWhile","value":"TakeWhile {  }","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873}],"decl_id":null,"docs":" An iterator which yields elements based on a predicate.\n","sig":null,"attributes":[{"value":"/ An iterator which yields elements based on a predicate.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":65104,"byte_end":65163,"line_start":2490,"line_end":2490,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":65470,"byte_end":65474,"line_start":2507,"line_end":2507,"column_start":8,"column_end":12},"name":"next","qualname":"<TakeWhile<I, P> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":65453,"byte_end":65462,"line_start":2506,"line_end":2506,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":65973,"byte_end":65982,"line_start":2526,"line_end":2526,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<TakeWhile<I, P> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":65956,"byte_end":65965,"line_start":2525,"line_end":2525,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":882},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66253,"byte_end":66258,"line_start":2538,"line_end":2538,"column_start":12,"column_end":17},"name":"Cycle","qualname":"::Cycle","value":"Cycle {  }","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"decl_id":null,"docs":" An iterator which cycles another endlessly.\n","sig":null,"attributes":[{"value":"/ An iterator which cycles another endlessly.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66170,"byte_end":66217,"line_start":2536,"line_end":2536,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66443,"byte_end":66447,"line_start":2551,"line_end":2551,"column_start":8,"column_end":12},"name":"next","qualname":"<Cycle<I> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<I::Item>, I::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66426,"byte_end":66435,"line_start":2550,"line_end":2550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66717,"byte_end":66726,"line_start":2562,"line_end":2562,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Cycle<I> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66700,"byte_end":66709,"line_start":2561,"line_end":2561,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":892},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66929,"byte_end":66932,"line_start":2570,"line_end":2570,"column_start":12,"column_end":15},"name":"Zip","qualname":"::Zip","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields pairs of this iterator's and another iterator's\n values.\n","sig":null,"attributes":[{"value":"/ An iterator that yields pairs of this iterator's and another iterator's","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66806,"byte_end":66881,"line_start":2567,"line_end":2567,"column_start":1,"column_end":76}},{"value":"/ values.","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66882,"byte_end":66893,"line_start":2568,"line_end":2568,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":67150,"byte_end":67154,"line_start":2581,"line_end":2581,"column_start":8,"column_end":12},"name":"next","qualname":"<Zip<T, U> as FallibleIterator>::next","value":"fn next(&mut Self) -> Result<Option<(T::Item, U::Item)>, T::Error>","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":62},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":67133,"byte_end":67142,"line_start":2580,"line_end":2580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":67382,"byte_end":67391,"line_start":2589,"line_end":2589,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Zip<T, U> as FallibleIterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":63},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":67365,"byte_end":67374,"line_start":2588,"line_end":2588,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":3750,"byte_end":3758,"line_start":109,"line_end":109,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":3953,"byte_end":3959,"line_start":120,"line_end":120,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28854,"byte_end":28857,"line_start":995,"line_end":995,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29369,"byte_end":29372,"line_start":1016,"line_end":1016,"column_start":79,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30945,"byte_end":30948,"line_start":1064,"line_end":1064,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":31324,"byte_end":31331,"line_start":1078,"line_end":1078,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":31842,"byte_end":31849,"line_start":1100,"line_end":1100,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":32392,"byte_end":32400,"line_start":1122,"line_end":1122,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":32849,"byte_end":32857,"line_start":1142,"line_end":1142,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33673,"byte_end":33674,"line_start":1176,"line_end":1176,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34072,"byte_end":34075,"line_start":1198,"line_end":1198,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34849,"byte_end":34852,"line_start":1231,"line_end":1231,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":35748,"byte_end":35753,"line_start":1271,"line_end":1271,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":38534,"byte_end":38539,"line_start":1365,"line_end":1365,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":39862,"byte_end":39868,"line_start":1407,"line_end":1407,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40486,"byte_end":40492,"line_start":1435,"line_end":1435,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41316,"byte_end":41323,"line_start":1468,"line_end":1468,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42006,"byte_end":42013,"line_start":1499,"line_end":1499,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42736,"byte_end":42745,"line_start":1530,"line_end":1530,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44186,"byte_end":44192,"line_start":1593,"line_end":1593,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":45306,"byte_end":45312,"line_start":1640,"line_end":1640,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":46440,"byte_end":46449,"line_start":1687,"line_end":1687,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":47416,"byte_end":47425,"line_start":1726,"line_end":1726,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":48491,"byte_end":48498,"line_start":1767,"line_end":1767,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":50084,"byte_end":50091,"line_start":1827,"line_end":1827,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":50419,"byte_end":50426,"line_start":1842,"line_end":1842,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":51966,"byte_end":51970,"line_start":1899,"line_end":1899,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":53666,"byte_end":53673,"line_start":1982,"line_end":1982,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54530,"byte_end":54537,"line_start":2020,"line_end":2020,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55369,"byte_end":55377,"line_start":2054,"line_end":2054,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55821,"byte_end":55829,"line_start":2075,"line_end":2075,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56315,"byte_end":56321,"line_start":2097,"line_end":2097,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":57474,"byte_end":57480,"line_start":2145,"line_end":2145,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58177,"byte_end":58186,"line_start":2175,"line_end":2175,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58471,"byte_end":58479,"line_start":2189,"line_end":2189,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58829,"byte_end":58837,"line_start":2204,"line_end":2204,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":59897,"byte_end":59900,"line_start":2249,"line_end":2249,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60556,"byte_end":60559,"line_start":2281,"line_end":2281,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61110,"byte_end":61114,"line_start":2308,"line_end":2308,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61753,"byte_end":61757,"line_start":2338,"line_end":2338,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":62521,"byte_end":62530,"line_start":2375,"line_end":2375,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":63458,"byte_end":63464,"line_start":2416,"line_end":2416,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":64489,"byte_end":64493,"line_start":2460,"line_end":2460,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":65297,"byte_end":65306,"line_start":2498,"line_end":2498,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66319,"byte_end":66324,"line_start":2543,"line_end":2543,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66979,"byte_end":66982,"line_start":2572,"line_end":2572,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":3750,"byte_end":3758,"line_start":109,"line_end":109,"column_start":24,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":38},"to":{"krate":1,"index":3056}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":3953,"byte_end":3959,"line_start":120,"line_end":120,"column_start":32,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":1,"index":47063},"to":{"krate":0,"index":51}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":28854,"byte_end":28857,"line_start":995,"line_end":995,"column_start":57,"column_end":60},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":421},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29369,"byte_end":29372,"line_start":1016,"line_end":1016,"column_start":79,"column_end":82},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":421},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":29599,"byte_end":29615,"line_start":1024,"line_end":1024,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":59},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30685,"byte_end":30690,"line_start":1056,"line_end":1056,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3155},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":30945,"byte_end":30948,"line_start":1064,"line_end":1064,"column_start":37,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":7429},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":31324,"byte_end":31331,"line_start":1078,"line_end":1078,"column_start":40,"column_end":47},"kind":{"Impl":{"id":5}},"from":{"krate":4,"index":1980},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":31842,"byte_end":31849,"line_start":1100,"line_end":1100,"column_start":48,"column_end":55},"kind":{"Impl":{"id":6}},"from":{"krate":4,"index":1265},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":32392,"byte_end":32400,"line_start":1122,"line_end":1122,"column_start":37,"column_end":45},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":7809},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":32849,"byte_end":32857,"line_start":1142,"line_end":1142,"column_start":45,"column_end":53},"kind":{"Impl":{"id":8}},"from":{"krate":5,"index":1500},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":33673,"byte_end":33674,"line_start":1176,"line_end":1176,"column_start":34,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":256},"to":{"krate":0,"index":250}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34072,"byte_end":34075,"line_start":1198,"line_end":1198,"column_start":36,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":630},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":34849,"byte_end":34852,"line_start":1231,"line_end":1231,"column_start":47,"column_end":50},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":630},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":35748,"byte_end":35753,"line_start":1271,"line_end":1271,"column_start":33,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":654},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":38534,"byte_end":38539,"line_start":1365,"line_end":1365,"column_start":44,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":654},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":39862,"byte_end":39868,"line_start":1407,"line_end":1407,"column_start":37,"column_end":43},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":668},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":40486,"byte_end":40492,"line_start":1435,"line_end":1435,"column_start":48,"column_end":54},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":668},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":41316,"byte_end":41323,"line_start":1468,"line_end":1468,"column_start":36,"column_end":43},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":678},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42006,"byte_end":42013,"line_start":1499,"line_end":1499,"column_start":47,"column_end":54},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":678},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":42736,"byte_end":42745,"line_start":1530,"line_end":1530,"column_start":30,"column_end":39},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":688},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":44186,"byte_end":44192,"line_start":1593,"line_end":1593,"column_start":33,"column_end":39},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":698},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":45306,"byte_end":45312,"line_start":1640,"line_end":1640,"column_start":44,"column_end":50},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":698},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":46440,"byte_end":46449,"line_start":1687,"line_end":1687,"column_start":36,"column_end":45},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":711},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":47416,"byte_end":47425,"line_start":1726,"line_end":1726,"column_start":47,"column_end":56},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":711},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":48491,"byte_end":48498,"line_start":1767,"line_end":1767,"column_start":36,"column_end":43},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":724},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":50084,"byte_end":50091,"line_start":1827,"line_end":1827,"column_start":19,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":2772}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":50419,"byte_end":50426,"line_start":1842,"line_end":1842,"column_start":30,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":438},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":51966,"byte_end":51970,"line_start":1899,"line_end":1899,"column_start":30,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":740},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":53666,"byte_end":53673,"line_start":1982,"line_end":1982,"column_start":33,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":54530,"byte_end":54537,"line_start":2020,"line_end":2020,"column_start":44,"column_end":51},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":750},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55369,"byte_end":55377,"line_start":2054,"line_end":2054,"column_start":28,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":763},"to":{"krate":1,"index":8193}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":55821,"byte_end":55829,"line_start":2075,"line_end":2075,"column_start":33,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":763},"to":{"krate":1,"index":8042}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":56315,"byte_end":56321,"line_start":2097,"line_end":2097,"column_start":36,"column_end":42},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":773},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":57474,"byte_end":57480,"line_start":2145,"line_end":2145,"column_start":47,"column_end":53},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":773},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58177,"byte_end":58186,"line_start":2175,"line_end":2175,"column_start":24,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":525},"to":{"krate":1,"index":3056}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58471,"byte_end":58479,"line_start":2189,"line_end":2189,"column_start":9,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":58829,"byte_end":58837,"line_start":2204,"line_end":2204,"column_start":30,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":786},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":59897,"byte_end":59900,"line_start":2249,"line_end":2249,"column_start":30,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":796},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":60556,"byte_end":60559,"line_start":2281,"line_end":2281,"column_start":41,"column_end":44},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":796},"to":{"krate":0,"index":208}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61110,"byte_end":61114,"line_start":2308,"line_end":2308,"column_start":40,"column_end":44},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":806},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":61753,"byte_end":61757,"line_start":2338,"line_end":2338,"column_start":30,"column_end":34},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":823},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":62521,"byte_end":62530,"line_start":2375,"line_end":2375,"column_start":33,"column_end":42},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":833},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":63458,"byte_end":63464,"line_start":2416,"line_end":2416,"column_start":30,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":847},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":64489,"byte_end":64493,"line_start":2460,"line_end":2460,"column_start":30,"column_end":34},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":858},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":65297,"byte_end":65306,"line_start":2498,"line_end":2498,"column_start":33,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":868},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66319,"byte_end":66324,"line_start":2543,"line_end":2543,"column_start":30,"column_end":35},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":882},"to":{"krate":0,"index":59}},{"span":{"file_name":"C:\\Users\\EdsoLabs\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\fallible-iterator-0.2.0\\src\\lib.rs","byte_start":66979,"byte_end":66982,"line_start":2572,"line_end":2572,"column_start":33,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":892},"to":{"krate":0,"index":59}}]}